define(['dart_sdk', 'packages/flutter/src/rendering/layer.dart', 'packages/flutter/src/foundation/debug.dart', 'packages/flutter/src/widgets/widget_span.dart', 'packages/flutter/src/rendering/flex.dart', 'packages/flutter/src/painting/basic_types.dart', 'packages/flutter/src/rendering/debug_overflow_indicator.dart'], (function load__packages__flutter_math_fork__src__render__layout__vlist_dart(dart_sdk, packages__flutter__src__rendering__layer$46dart, packages__flutter__src__foundation__debug$46dart, packages__flutter__src__widgets__widget_span$46dart, packages__flutter__src__rendering__flex$46dart, packages__flutter__src__painting__basic_types$46dart, packages__flutter__src__rendering__debug_overflow_indicator$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const ui = dart_sdk.ui;
  const math = dart_sdk.math;
  const _interceptors = dart_sdk._interceptors;
  const _internal = dart_sdk._internal;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const box = packages__flutter__src__rendering__layer$46dart.src__rendering__box;
  const object = packages__flutter__src__rendering__layer$46dart.src__rendering__object;
  const diagnostics = packages__flutter__src__foundation__debug$46dart.src__foundation__diagnostics;
  const assertions = packages__flutter__src__foundation__debug$46dart.src__foundation__assertions;
  const framework = packages__flutter__src__widgets__widget_span$46dart.src__widgets__framework;
  const basic = packages__flutter__src__widgets__widget_span$46dart.src__widgets__basic;
  const flex = packages__flutter__src__rendering__flex$46dart.src__rendering__flex;
  const basic_types = packages__flutter__src__painting__basic_types$46dart.src__painting__basic_types;
  const debug_overflow_indicator = packages__flutter__src__rendering__debug_overflow_indicator$46dart.src__rendering__debug_overflow_indicator;
  var vlist = Object.create(dart.library);
  var $runtimeType = dartx.runtimeType;
  var $add = dartx.add;
  dart._checkModuleNullSafetyMode(false);
  var T = {
    WidgetL: () => (T.WidgetL = dart.constFn(dart.legacy(framework.Widget)))(),
    EnumPropertyOfTextBaseline: () => (T.EnumPropertyOfTextBaseline = dart.constFn(diagnostics.EnumProperty$(ui.TextBaseline)))(),
    EnumPropertyOfCrossAxisAlignment: () => (T.EnumPropertyOfCrossAxisAlignment = dart.constFn(diagnostics.EnumProperty$(flex.CrossAxisAlignment)))(),
    EnumPropertyOfTextDirection: () => (T.EnumPropertyOfTextDirection = dart.constFn(diagnostics.EnumProperty$(ui.TextDirection)))(),
    RenderBoxAnddoubleTodouble: () => (T.RenderBoxAnddoubleTodouble = dart.constFn(dart.fnType(core.double, [box.RenderBox, core.double])))(),
    JSArrayOfRenderBox: () => (T.JSArrayOfRenderBox = dart.constFn(_interceptors.JSArray$(box.RenderBox)))(),
    JSArrayOfDiagnosticsNode: () => (T.JSArrayOfDiagnosticsNode = dart.constFn(_interceptors.JSArray$(diagnostics.DiagnosticsNode)))(),
    VoidTobool: () => (T.VoidTobool = dart.constFn(dart.fnType(core.bool, [])))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.const({
        __proto__: ui.TextBaseline.prototype,
        [_name]: "TextBaseline.alphabetic",
        index: 0
      });
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: flex.CrossAxisAlignment.prototype,
        [_name$]: "CrossAxisAlignment.center",
        index: 2
      });
    },
    get C2() {
      return C[2] = dart.constList([], T.WidgetL());
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: ui.TextDirection.prototype,
        [_name]: "TextDirection.ltr",
        index: 1
      });
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: flex.CrossAxisAlignment.prototype,
        [_name$]: "CrossAxisAlignment.end",
        index: 1
      });
    },
    get C5() {
      return C[5] = dart.const({
        __proto__: flex.CrossAxisAlignment.prototype,
        [_name$]: "CrossAxisAlignment.start",
        index: 0
      });
    },
    get C6() {
      return C[6] = dart.const({
        __proto__: flex.CrossAxisAlignment.prototype,
        [_name$]: "CrossAxisAlignment.baseline",
        index: 4
      });
    },
    get C7() {
      return C[7] = dart.const({
        __proto__: flex.CrossAxisAlignment.prototype,
        [_name$]: "CrossAxisAlignment.stretch",
        index: 3
      });
    }
  }, false);
  var C = Array(8).fill(void 0);
  var I = [
    "package:flutter_math_fork/src/render/layout/vlist.dart",
    "file:///D:/src/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_math_fork-0.3.3+1/lib/src/render/layout/vlist.dart"
  ];
  var customCrossSize = dart.privateName(vlist, "VListParentData.customCrossSize");
  var trailingMargin = dart.privateName(vlist, "VListParentData.trailingMargin");
  var hShift = dart.privateName(vlist, "VListParentData.hShift");
  vlist.VListParentData = class VListParentData extends box.ContainerBoxParentData$(box.RenderBox) {
    get customCrossSize() {
      return this[customCrossSize];
    }
    set customCrossSize(value) {
      this[customCrossSize] = value;
    }
    get trailingMargin() {
      return this[trailingMargin];
    }
    set trailingMargin(value) {
      this[trailingMargin] = value;
    }
    get hShift() {
      return this[hShift];
    }
    set hShift(value) {
      this[hShift] = value;
    }
    toString() {
      return dart.str(super.toString()) + "; customCrossSize=" + dart.str(this.customCrossSize != null) + "; trailingMargin=" + dart.str(this.trailingMargin) + "; horizontalShift=" + dart.str(this.hShift);
    }
  };
  (vlist.VListParentData.new = function() {
    this[customCrossSize] = null;
    this[trailingMargin] = 0.0;
    this[hShift] = 0.0;
    vlist.VListParentData.__proto__.new.call(this);
    ;
  }).prototype = vlist.VListParentData.prototype;
  dart.addTypeTests(vlist.VListParentData);
  dart.addTypeCaches(vlist.VListParentData);
  dart.setLibraryUri(vlist.VListParentData, I[0]);
  dart.setFieldSignature(vlist.VListParentData, () => ({
    __proto__: dart.getFields(vlist.VListParentData.__proto__),
    customCrossSize: dart.fieldType(dart.nullable(dart.fnType(box.BoxConstraints, [core.double]))),
    trailingMargin: dart.fieldType(core.double),
    hShift: dart.fieldType(core.double)
  }));
  dart.defineExtensionMethods(vlist.VListParentData, ['toString']);
  var customCrossSize$ = dart.privateName(vlist, "VListElement.customCrossSize");
  var trailingMargin$ = dart.privateName(vlist, "VListElement.trailingMargin");
  var hShift$ = dart.privateName(vlist, "VListElement.hShift");
  vlist.VListElement = class VListElement extends framework.ParentDataWidget$(vlist.VListParentData) {
    get customCrossSize() {
      return this[customCrossSize$];
    }
    set customCrossSize(value) {
      super.customCrossSize = value;
    }
    get trailingMargin() {
      return this[trailingMargin$];
    }
    set trailingMargin(value) {
      super.trailingMargin = value;
    }
    get hShift() {
      return this[hShift$];
    }
    set hShift(value) {
      super.hShift = value;
    }
    applyParentData(renderObject) {
      if (renderObject == null) dart.nullFailed(I[1], 36, 37, "renderObject");
      if (!vlist.VListParentData.is(renderObject.parentData)) dart.assertFailed(null, I[1], 37, 12, "renderObject.parentData is VListParentData");
      let parentData = vlist.VListParentData.as(renderObject.parentData);
      let needsLayout = false;
      if (!dart.equals(parentData.customCrossSize, this.customCrossSize)) {
        parentData.customCrossSize = this.customCrossSize;
        needsLayout = true;
      }
      if (parentData.trailingMargin != this.trailingMargin) {
        parentData.trailingMargin = this.trailingMargin;
        needsLayout = true;
      }
      if (parentData.hShift != this.hShift) {
        parentData.hShift = this.hShift;
        needsLayout = true;
      }
      if (needsLayout) {
        let targetParent = renderObject.parent;
        if (object.RenderObject.is(targetParent)) targetParent.markNeedsLayout();
      }
    }
    debugFillProperties(properties) {
      if (properties == null) dart.nullFailed(I[1], 63, 56, "properties");
      super.debugFillProperties(properties);
      properties.add(new diagnostics.FlagProperty.new("customSize", {value: this.customCrossSize != null, ifTrue: "using relative size"}));
      properties.add(new diagnostics.DoubleProperty.new("trailingMargin", this.trailingMargin));
      properties.add(new diagnostics.DoubleProperty.new("horizontalShift", this.hShift));
    }
    get debugTypicalAncestorWidgetClass() {
      return dart.wrapType(vlist.VList);
    }
  };
  (vlist.VListElement.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let customCrossSize = opts && 'customCrossSize' in opts ? opts.customCrossSize : null;
    let trailingMargin = opts && 'trailingMargin' in opts ? opts.trailingMargin : 0;
    if (trailingMargin == null) dart.nullFailed(I[1], 30, 10, "trailingMargin");
    let hShift = opts && 'hShift' in opts ? opts.hShift : 0;
    if (hShift == null) dart.nullFailed(I[1], 31, 10, "hShift");
    let child = opts && 'child' in opts ? opts.child : null;
    if (child == null) dart.nullFailed(I[1], 32, 21, "child");
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[customCrossSize$] = customCrossSize;
    this[trailingMargin$] = trailingMargin;
    this[hShift$] = hShift;
    vlist.VListElement.__proto__.new.call(this, {key: key, child: child, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = vlist.VListElement.prototype;
  dart.addTypeTests(vlist.VListElement);
  dart.addTypeCaches(vlist.VListElement);
  dart.setMethodSignature(vlist.VListElement, () => ({
    __proto__: dart.getMethods(vlist.VListElement.__proto__),
    applyParentData: dart.fnType(dart.void, [object.RenderObject])
  }));
  dart.setGetterSignature(vlist.VListElement, () => ({
    __proto__: dart.getGetters(vlist.VListElement.__proto__),
    debugTypicalAncestorWidgetClass: core.Type
  }));
  dart.setLibraryUri(vlist.VListElement, I[0]);
  dart.setFieldSignature(vlist.VListElement, () => ({
    __proto__: dart.getFields(vlist.VListElement.__proto__),
    customCrossSize: dart.finalFieldType(dart.nullable(dart.fnType(box.BoxConstraints, [core.double]))),
    trailingMargin: dart.finalFieldType(core.double),
    hShift: dart.finalFieldType(core.double)
  }));
  var textBaseline$ = dart.privateName(vlist, "VList.textBaseline");
  var baselineReferenceWidgetIndex$ = dart.privateName(vlist, "VList.baselineReferenceWidgetIndex");
  var crossAxisAlignment$ = dart.privateName(vlist, "VList.crossAxisAlignment");
  var textDirection$ = dart.privateName(vlist, "VList.textDirection");
  var _name = dart.privateName(ui, "_name");
  var _name$ = dart.privateName(flex, "_name");
  var _needTextDirection = dart.privateName(vlist, "_needTextDirection");
  vlist.VList = class VList extends framework.MultiChildRenderObjectWidget {
    get textBaseline() {
      return this[textBaseline$];
    }
    set textBaseline(value) {
      super.textBaseline = value;
    }
    get baselineReferenceWidgetIndex() {
      return this[baselineReferenceWidgetIndex$];
    }
    set baselineReferenceWidgetIndex(value) {
      super.baselineReferenceWidgetIndex = value;
    }
    get crossAxisAlignment() {
      return this[crossAxisAlignment$];
    }
    set crossAxisAlignment(value) {
      super.crossAxisAlignment = value;
    }
    get textDirection() {
      return this[textDirection$];
    }
    set textDirection(value) {
      super.textDirection = value;
    }
    get [_needTextDirection]() {
      return this.crossAxisAlignment == flex.CrossAxisAlignment.start || this.crossAxisAlignment == flex.CrossAxisAlignment.end;
    }
    getEffectiveTextDirection(context) {
      let t0;
      if (context == null) dart.nullFailed(I[1], 126, 57, "context");
      t0 = this.textDirection;
      return t0 == null ? dart.test(this[_needTextDirection]) ? basic.Directionality.of(context) : null : t0;
    }
    createRenderObject(context) {
      if (context == null) dart.nullFailed(I[1], 129, 61, "context");
      return new vlist.RenderRelativeWidthColumn.new({textBaseline: this.textBaseline, baselineReferenceWidgetIndex: this.baselineReferenceWidgetIndex, crossAxisAlignment: this.crossAxisAlignment, textDirection: this.getEffectiveTextDirection(context)});
    }
    updateRenderObject(context, renderObject) {
      let t0;
      if (context == null) dart.nullFailed(I[1], 140, 20, "context");
      vlist.RenderRelativeWidthColumn.as(renderObject);
      if (renderObject == null) dart.nullFailed(I[1], 140, 65, "renderObject");
      t0 = renderObject;
      (() => {
        t0.textBaseline = this.textBaseline;
        t0.baselineReferenceWidgetIndex = this.baselineReferenceWidgetIndex;
        t0.crossAxisAlignment = this.crossAxisAlignment;
        t0.textDirection = this.getEffectiveTextDirection(context);
        return t0;
      })();
    }
    debugFillProperties(properties) {
      if (properties == null) dart.nullFailed(I[1], 150, 56, "properties");
      super.debugFillProperties(properties);
      properties.add(new (T.EnumPropertyOfTextBaseline()).new("textBaseline", this.textBaseline, {defaultValue: null}));
      properties.add(new diagnostics.IntProperty.new("baselineReferenceWidgetNum", this.baselineReferenceWidgetIndex, {defaultValue: 0}));
      properties.add(new (T.EnumPropertyOfCrossAxisAlignment()).new("crossAxisAlignment", this.crossAxisAlignment));
      properties.add(new (T.EnumPropertyOfTextDirection()).new("textDirection", this.textDirection, {defaultValue: null}));
    }
  };
  (vlist.VList.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : C[0] || CT.C0;
    if (textBaseline == null) dart.nullFailed(I[1], 109, 10, "textBaseline");
    let baselineReferenceWidgetIndex = opts && 'baselineReferenceWidgetIndex' in opts ? opts.baselineReferenceWidgetIndex : 0;
    if (baselineReferenceWidgetIndex == null) dart.nullFailed(I[1], 110, 10, "baselineReferenceWidgetIndex");
    let crossAxisAlignment = opts && 'crossAxisAlignment' in opts ? opts.crossAxisAlignment : C[1] || CT.C1;
    if (crossAxisAlignment == null) dart.nullFailed(I[1], 112, 10, "crossAxisAlignment");
    let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
    let children = opts && 'children' in opts ? opts.children : C[2] || CT.C2;
    if (children == null) dart.nullFailed(I[1], 114, 18, "children");
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[textBaseline$] = textBaseline;
    this[baselineReferenceWidgetIndex$] = baselineReferenceWidgetIndex;
    this[crossAxisAlignment$] = crossAxisAlignment;
    this[textDirection$] = textDirection;
    vlist.VList.__proto__.new.call(this, {key: key, children: children, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = vlist.VList.prototype;
  dart.addTypeTests(vlist.VList);
  dart.addTypeCaches(vlist.VList);
  dart.setMethodSignature(vlist.VList, () => ({
    __proto__: dart.getMethods(vlist.VList.__proto__),
    getEffectiveTextDirection: dart.fnType(dart.nullable(ui.TextDirection), [framework.BuildContext]),
    createRenderObject: dart.fnType(vlist.RenderRelativeWidthColumn, [framework.BuildContext])
  }));
  dart.setGetterSignature(vlist.VList, () => ({
    __proto__: dart.getGetters(vlist.VList.__proto__),
    [_needTextDirection]: core.bool
  }));
  dart.setLibraryUri(vlist.VList, I[0]);
  dart.setFieldSignature(vlist.VList, () => ({
    __proto__: dart.getFields(vlist.VList.__proto__),
    textBaseline: dart.finalFieldType(ui.TextBaseline),
    baselineReferenceWidgetIndex: dart.finalFieldType(core.int),
    crossAxisAlignment: dart.finalFieldType(flex.CrossAxisAlignment),
    textDirection: dart.finalFieldType(dart.nullable(ui.TextDirection))
  }));
  var distanceToBaseline = dart.privateName(vlist, "RenderRelativeWidthColumn.distanceToBaseline");
  var _overflow = dart.privateName(vlist, "_overflow");
  var _textBaseline = dart.privateName(vlist, "_textBaseline");
  var _baselineReferenceWidgetIndex = dart.privateName(vlist, "_baselineReferenceWidgetIndex");
  var _crossAxisAlignment = dart.privateName(vlist, "_crossAxisAlignment");
  var _textDirection = dart.privateName(vlist, "_textDirection");
  var _debugHasNecessaryDirections = dart.privateName(vlist, "_debugHasNecessaryDirections");
  var _hasOverflow = dart.privateName(vlist, "_hasOverflow");
  var _getIntrinsicSize = dart.privateName(vlist, "_getIntrinsicSize");
  const RenderBox_ContainerRenderObjectMixin$36 = class RenderBox_ContainerRenderObjectMixin extends box.RenderBox {};
  (RenderBox_ContainerRenderObjectMixin$36.new = function() {
    object.ContainerRenderObjectMixin$(box.RenderBox, vlist.VListParentData)[dart.mixinNew].call(this);
    RenderBox_ContainerRenderObjectMixin$36.__proto__.new.call(this);
  }).prototype = RenderBox_ContainerRenderObjectMixin$36.prototype;
  dart.applyMixin(RenderBox_ContainerRenderObjectMixin$36, object.ContainerRenderObjectMixin$(box.RenderBox, vlist.VListParentData));
  const RenderBox_RenderBoxContainerDefaultsMixin$36 = class RenderBox_RenderBoxContainerDefaultsMixin extends RenderBox_ContainerRenderObjectMixin$36 {};
  (RenderBox_RenderBoxContainerDefaultsMixin$36.new = function() {
    RenderBox_RenderBoxContainerDefaultsMixin$36.__proto__.new.call(this);
  }).prototype = RenderBox_RenderBoxContainerDefaultsMixin$36.prototype;
  dart.applyMixin(RenderBox_RenderBoxContainerDefaultsMixin$36, box.RenderBoxContainerDefaultsMixin$(box.RenderBox, vlist.VListParentData));
  const RenderBox_DebugOverflowIndicatorMixin$36 = class RenderBox_DebugOverflowIndicatorMixin extends RenderBox_RenderBoxContainerDefaultsMixin$36 {};
  (RenderBox_DebugOverflowIndicatorMixin$36.new = function() {
    debug_overflow_indicator.DebugOverflowIndicatorMixin[dart.mixinNew].call(this);
    RenderBox_DebugOverflowIndicatorMixin$36.__proto__.new.call(this);
  }).prototype = RenderBox_DebugOverflowIndicatorMixin$36.prototype;
  dart.applyMixin(RenderBox_DebugOverflowIndicatorMixin$36, debug_overflow_indicator.DebugOverflowIndicatorMixin);
  vlist.RenderRelativeWidthColumn = class RenderRelativeWidthColumn extends RenderBox_DebugOverflowIndicatorMixin$36 {
    get distanceToBaseline() {
      return this[distanceToBaseline];
    }
    set distanceToBaseline(value) {
      this[distanceToBaseline] = value;
    }
    get textBaseline() {
      return this[_textBaseline];
    }
    set textBaseline(value) {
      if (value == null) dart.nullFailed(I[1], 188, 33, "value");
      if (this[_textBaseline] != value) {
        this[_textBaseline] = value;
        this.markNeedsLayout();
      }
    }
    get baselineReferenceWidgetIndex() {
      return this[_baselineReferenceWidgetIndex];
    }
    set baselineReferenceWidgetIndex(value) {
      if (value == null) dart.nullFailed(I[1], 197, 40, "value");
      if (this[_baselineReferenceWidgetIndex] != value) {
        this[_baselineReferenceWidgetIndex] = value;
        this.markNeedsLayout();
      }
    }
    get crossAxisAlignment() {
      return this[_crossAxisAlignment];
    }
    set crossAxisAlignment(value) {
      if (value == null) dart.nullFailed(I[1], 215, 45, "value");
      if (this[_crossAxisAlignment] != value) {
        this[_crossAxisAlignment] = value;
        this.markNeedsLayout();
      }
    }
    get textDirection() {
      return this[_textDirection];
    }
    set textDirection(value) {
      if (this[_textDirection] != value) {
        this[_textDirection] = value;
        this.markNeedsLayout();
      }
    }
    get [_debugHasNecessaryDirections]() {
      if (this.crossAxisAlignment == flex.CrossAxisAlignment.start || this.crossAxisAlignment == flex.CrossAxisAlignment.end) {
        if (!(this.textDirection != null)) dart.assertFailed("Vertical " + dart.str(this[$runtimeType]) + " with " + dart.str(this.crossAxisAlignment) + " has a null textDirection, so the alignment cannot be resolved.", I[1], 234, 14, "textDirection != null");
      }
      return true;
    }
    get [_hasOverflow]() {
      return dart.nullCheck(this[_overflow]) > 1e-10;
    }
    setupParentData(child) {
      box.RenderBox.as(child);
      if (child == null) dart.nullFailed(I[1], 244, 34, "child");
      if (!vlist.VListParentData.is(child.parentData)) {
        child.parentData = new vlist.VListParentData.new();
      }
    }
    [_getIntrinsicSize](opts) {
      let sizingDirection = opts && 'sizingDirection' in opts ? opts.sizingDirection : null;
      if (sizingDirection == null) dart.nullFailed(I[1], 251, 19, "sizingDirection");
      let extent = opts && 'extent' in opts ? opts.extent : null;
      if (extent == null) dart.nullFailed(I[1], 253, 9, "extent");
      let childSize = opts && 'childSize' in opts ? opts.childSize : null;
      if (childSize == null) dart.nullFailed(I[1], 255, 9, "childSize");
      if (sizingDirection == basic_types.Axis.vertical) {
        let inflexibleSpace = 0.0;
        let child = this.firstChild;
        while (child != null) {
          inflexibleSpace = inflexibleSpace + dart.notNull(childSize(child, extent));
          let childParentData = vlist.VListParentData.as(child.parentData);
          child = childParentData.nextSibling;
        }
        return inflexibleSpace;
      } else {
        let maxCrossSize = 0.0;
        let child = this.firstChild;
        while (child != null) {
          let childMainSize = child.getMaxIntrinsicHeight(1 / 0);
          let crossSize = childSize(child, childMainSize);
          maxCrossSize = math.max(core.double, maxCrossSize, crossSize);
          let childParentData = vlist.VListParentData.as(child.parentData);
          child = childParentData.nextSibling;
        }
        return maxCrossSize;
      }
    }
    computeMinIntrinsicWidth(height) {
      if (height == null) dart.nullFailed(I[1], 288, 42, "height");
      return this[_getIntrinsicSize]({sizingDirection: basic_types.Axis.horizontal, extent: height, childSize: dart.fn((child, extent) => {
          if (child == null) dart.nullFailed(I[1], 291, 31, "child");
          if (extent == null) dart.nullFailed(I[1], 291, 45, "extent");
          return child.getMinIntrinsicWidth(extent);
        }, T.RenderBoxAnddoubleTodouble())});
    }
    computeMaxIntrinsicWidth(height) {
      if (height == null) dart.nullFailed(I[1], 296, 42, "height");
      return this[_getIntrinsicSize]({sizingDirection: basic_types.Axis.horizontal, extent: height, childSize: dart.fn((child, extent) => {
          if (child == null) dart.nullFailed(I[1], 299, 31, "child");
          if (extent == null) dart.nullFailed(I[1], 299, 45, "extent");
          return child.getMaxIntrinsicWidth(extent);
        }, T.RenderBoxAnddoubleTodouble())});
    }
    computeMinIntrinsicHeight(width) {
      if (width == null) dart.nullFailed(I[1], 304, 43, "width");
      return this[_getIntrinsicSize]({sizingDirection: basic_types.Axis.vertical, extent: width, childSize: dart.fn((child, extent) => {
          if (child == null) dart.nullFailed(I[1], 307, 31, "child");
          if (extent == null) dart.nullFailed(I[1], 307, 45, "extent");
          return child.getMinIntrinsicHeight(extent);
        }, T.RenderBoxAnddoubleTodouble())});
    }
    computeMaxIntrinsicHeight(width) {
      if (width == null) dart.nullFailed(I[1], 312, 43, "width");
      return this[_getIntrinsicSize]({sizingDirection: basic_types.Axis.vertical, extent: width, childSize: dart.fn((child, extent) => {
          if (child == null) dart.nullFailed(I[1], 315, 31, "child");
          if (extent == null) dart.nullFailed(I[1], 315, 45, "extent");
          return child.getMaxIntrinsicHeight(extent);
        }, T.RenderBoxAnddoubleTodouble())});
    }
    computeDistanceToActualBaseline(baseline) {
      if (baseline == null) dart.nullFailed(I[1], 322, 56, "baseline");
      if (!!dart.test(this.debugNeedsLayout)) dart.assertFailed(null, I[1], 323, 12, "!debugNeedsLayout");
      return this.distanceToBaseline;
    }
    getRightMost(crossAxisAlignment, width) {
      if (crossAxisAlignment == null) dart.nullFailed(I[1], 327, 42, "crossAxisAlignment");
      if (width == null) dart.nullFailed(I[1], 327, 69, "width");
      switch (crossAxisAlignment) {
        case C[1] || CT.C1:
        {
          return dart.notNull(width) / 2;
        }
        case C[4] || CT.C4:
        {
          return 0.0;
        }
        case C[5] || CT.C5:
        case C[6] || CT.C6:
        case C[7] || CT.C7:
        default:
        {
          return width;
        }
      }
    }
    performLayout() {
      this.distanceToBaseline = null;
      if (!dart.test(this[_debugHasNecessaryDirections])) dart.assertFailed(null, I[1], 344, 12, "_debugHasNecessaryDirections");
      let rightMost = 0.0;
      let allocatedSize = 0.0;
      let leftMost = 0.0;
      let child = this.firstChild;
      let relativeChildren = T.JSArrayOfRenderBox().of([]);
      while (child != null) {
        let childParentData = vlist.VListParentData.as(child.parentData);
        if (childParentData.customCrossSize != null) {
          relativeChildren[$add](child);
        } else {
          let innerConstraints = new box.BoxConstraints.new({maxWidth: this.constraints.maxWidth});
          child.layout(innerConstraints, {parentUsesSize: true});
          let width = child.size.width;
          let right = this.getRightMost(this.crossAxisAlignment, width);
          leftMost = math.min(core.double, leftMost, dart.notNull(right) - dart.notNull(width));
          rightMost = math.max(core.double, rightMost, right);
          allocatedSize = allocatedSize + (dart.notNull(child.size.height) + dart.notNull(childParentData.trailingMargin));
        }
        if (!dart.equals(child.parentData, childParentData)) dart.assertFailed(null, I[1], 365, 14, "child.parentData == childParentData");
        child = childParentData.nextSibling;
      }
      let fixedChildrenCrossSize = rightMost - leftMost;
      for (let child of relativeChildren) {
        let childParentData = vlist.VListParentData.as(child.parentData);
        if (!(childParentData.customCrossSize != null)) dart.assertFailed(null, I[1], 374, 14, "childParentData.customCrossSize != null");
        child.layout(dart.nullCheck(childParentData.customCrossSize)(fixedChildrenCrossSize), {parentUsesSize: true});
        let width = child.size.width;
        let right = this.getRightMost(this.crossAxisAlignment, width);
        leftMost = math.min(core.double, leftMost, dart.notNull(right) - dart.notNull(width));
        rightMost = math.max(core.double, rightMost, right);
        allocatedSize = allocatedSize + (dart.notNull(child.size.height) + dart.notNull(childParentData.trailingMargin));
      }
      this.size = this.constraints.constrain(new ui.Size.new(rightMost - leftMost, allocatedSize));
      let actualSize = this.size.height;
      let crossSize = this.size.width;
      let actualSizeDelta = dart.notNull(actualSize) - allocatedSize;
      this[_overflow] = math.max(core.double, 0.0, -actualSizeDelta);
      let index = 0;
      let childMainPosition = 0.0;
      child = this.firstChild;
      while (child != null) {
        let childParentData = vlist.VListParentData.as(child.parentData);
        let childCrossPosition = 0.0;
        switch (this.crossAxisAlignment) {
          case C[5] || CT.C5:
          {
            childCrossPosition = this.textDirection == ui.TextDirection.ltr ? dart.notNull(childParentData.hShift) - leftMost : rightMost - dart.notNull(child.size.width) + dart.notNull(crossSize);
            break;
          }
          case C[4] || CT.C4:
          {
            childCrossPosition = this.textDirection == ui.TextDirection.rtl ? dart.notNull(childParentData.hShift) - leftMost : rightMost - dart.notNull(child.size.width) + dart.notNull(crossSize);
            break;
          }
          case C[1] || CT.C1:
          {
            childCrossPosition = -dart.notNull(child.size.width) / 2 - leftMost;
            break;
          }
          case C[7] || CT.C7:
          case C[6] || CT.C6:
          {
            childCrossPosition = 0.0;
            break;
          }
          default:
          {
            dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
          }
        }
        childCrossPosition = childCrossPosition + dart.notNull(childParentData.hShift);
        childParentData.offset = new ui.Offset.new(childCrossPosition, childMainPosition);
        if (index === this.baselineReferenceWidgetIndex) {
          this.distanceToBaseline = childMainPosition + dart.nullCheck(child.getDistanceToBaseline(this.textBaseline));
        }
        childMainPosition = childMainPosition + (dart.notNull(child.size.height) + dart.notNull(childParentData.trailingMargin));
        child = childParentData.nextSibling;
        index = index + 1;
      }
    }
    hitTestChildren(result, opts) {
      if (result == null) dart.nullFailed(I[1], 432, 41, "result");
      let position = opts && 'position' in opts ? opts.position : null;
      if (position == null) dart.nullFailed(I[1], 432, 66, "position");
      return this.defaultHitTestChildren(result, {position: position});
    }
    paint(context, offset) {
      if (context == null) dart.nullFailed(I[1], 436, 30, "context");
      if (offset == null) dart.nullFailed(I[1], 436, 46, "offset");
      if (!dart.test(this[_hasOverflow])) {
        this.defaultPaint(context, offset);
        return;
      }
      if (dart.test(this.size.isEmpty)) return;
      context.pushClipRect(this.needsCompositing, offset, ui.Offset.zero['&'](this.size), dart.bind(this, 'defaultPaint'));
      if (!dart.test(dart.fn(() => {
        let debugOverflowHints = T.JSArrayOfDiagnosticsNode().of([new assertions.ErrorDescription.new("The edge of the " + dart.str(this[$runtimeType]) + " that is overflowing has been marked " + "in the rendering with a yellow and black striped pattern. This is " + "usually caused by the contents being too big for the " + dart.str(this[$runtimeType]) + "."), new assertions.ErrorHint.new("Consider applying a flex factor (e.g. using an Expanded widget) to " + "force the children of the " + dart.str(this[$runtimeType]) + " to fit within the available " + "space instead of being sized to their natural size."), new assertions.ErrorHint.new("This is considered an error condition because it indicates that there " + "is content that cannot be seen. If the content is legitimately bigger " + "than the available space, consider clipping it with a ClipRect widget " + "before putting it in the flex, or using a scrollable container rather " + "than a Flex, like a ListView.")]);
        let overflowChildRect = null;
        overflowChildRect = new ui.Rect.fromLTWH(0.0, 0.0, 0.0, dart.notNull(this.size.height) + dart.nullCheck(this[_overflow]));
        this.paintOverflowIndicator(context, offset, ui.Offset.zero['&'](this.size), overflowChildRect, {overflowHints: debugOverflowHints});
        return true;
      }, T.VoidTobool())())) dart.assertFailed(null, I[1], 446, 12, "() {\r\n      // Only set this if it's null to save work. It gets reset to null if the\r\n      // _direction changes.\r\n      final debugOverflowHints = <DiagnosticsNode>[\r\n        ErrorDescription(\r\n          'The edge of the $runtimeType that is overflowing has been marked '\r\n          'in the rendering with a yellow and black striped pattern. This is '\r\n          'usually caused by the contents being too big for the $runtimeType.',\r\n        ),\r\n        ErrorHint(\r\n          'Consider applying a flex factor (e.g. using an Expanded widget) to '\r\n          'force the children of the $runtimeType to fit within the available '\r\n          'space instead of being sized to their natural size.',\r\n        ),\r\n        ErrorHint(\r\n          'This is considered an error condition because it indicates that there '\r\n          'is content that cannot be seen. If the content is legitimately bigger '\r\n          'than the available space, consider clipping it with a ClipRect widget '\r\n          'before putting it in the flex, or using a scrollable container rather '\r\n          'than a Flex, like a ListView.',\r\n        ),\r\n      ];\r\n\r\n      // Simulate a child rect that overflows by the right amount. This child\r\n      // rect is never used for drawing, just for determining the overflow\r\n      // location and amount.\r\n      Rect overflowChildRect;\r\n      overflowChildRect =\r\n          Rect.fromLTWH(0.0, 0.0, 0.0, size.height + _overflow!);\r\n\r\n      paintOverflowIndicator(\r\n          context, offset, Offset.zero & size, overflowChildRect,\r\n          overflowHints: debugOverflowHints);\r\n      return true;\r\n    }()");
    }
    describeApproximatePaintClip(child) {
      object.RenderObject.as(child);
      if (child == null) dart.nullFailed(I[1], 484, 51, "child");
      return dart.test(this[_hasOverflow]) ? ui.Offset.zero['&'](this.size) : null;
    }
    toStringShort() {
      let header = super.toStringShort();
      if (typeof this[_overflow] == 'number' && dart.test(this[_hasOverflow])) header = dart.notNull(header) + " OVERFLOWING";
      return header;
    }
    debugFillProperties(properties) {
      if (properties == null) dart.nullFailed(I[1], 495, 56, "properties");
      super.debugFillProperties(properties);
      properties.add(new (T.EnumPropertyOfCrossAxisAlignment()).new("crossAxisAlignment", this.crossAxisAlignment));
      properties.add(new (T.EnumPropertyOfTextDirection()).new("textDirection", this.textDirection, {defaultValue: null}));
      properties.add(new (T.EnumPropertyOfTextBaseline()).new("textBaseline", this.textBaseline, {defaultValue: null}));
      properties.add(new diagnostics.IntProperty.new("baselineReferenceWidgetIndex", this.baselineReferenceWidgetIndex));
    }
  };
  (vlist.RenderRelativeWidthColumn.new = function(opts) {
    let children = opts && 'children' in opts ? opts.children : null;
    let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : C[0] || CT.C0;
    if (textBaseline == null) dart.nullFailed(I[1], 173, 18, "textBaseline");
    let baselineReferenceWidgetIndex = opts && 'baselineReferenceWidgetIndex' in opts ? opts.baselineReferenceWidgetIndex : 0;
    if (baselineReferenceWidgetIndex == null) dart.nullFailed(I[1], 174, 9, "baselineReferenceWidgetIndex");
    let crossAxisAlignment = opts && 'crossAxisAlignment' in opts ? opts.crossAxisAlignment : C[1] || CT.C1;
    if (crossAxisAlignment == null) dart.nullFailed(I[1], 176, 24, "crossAxisAlignment");
    let textDirection = opts && 'textDirection' in opts ? opts.textDirection : C[3] || CT.C3;
    this[_overflow] = null;
    this[distanceToBaseline] = null;
    this[_textBaseline] = textBaseline;
    this[_baselineReferenceWidgetIndex] = baselineReferenceWidgetIndex;
    this[_crossAxisAlignment] = crossAxisAlignment;
    this[_textDirection] = textDirection;
    vlist.RenderRelativeWidthColumn.__proto__.new.call(this);
    this.addAll(children);
  }).prototype = vlist.RenderRelativeWidthColumn.prototype;
  dart.addTypeTests(vlist.RenderRelativeWidthColumn);
  dart.addTypeCaches(vlist.RenderRelativeWidthColumn);
  dart.setMethodSignature(vlist.RenderRelativeWidthColumn, () => ({
    __proto__: dart.getMethods(vlist.RenderRelativeWidthColumn.__proto__),
    [_getIntrinsicSize]: dart.fnType(core.double, [], {}, {childSize: dart.fnType(core.double, [box.RenderBox, core.double]), extent: core.double, sizingDirection: basic_types.Axis}),
    getRightMost: dart.fnType(core.double, [flex.CrossAxisAlignment, core.double])
  }));
  dart.setGetterSignature(vlist.RenderRelativeWidthColumn, () => ({
    __proto__: dart.getGetters(vlist.RenderRelativeWidthColumn.__proto__),
    textBaseline: ui.TextBaseline,
    baselineReferenceWidgetIndex: core.int,
    crossAxisAlignment: flex.CrossAxisAlignment,
    textDirection: dart.nullable(ui.TextDirection),
    [_debugHasNecessaryDirections]: core.bool,
    [_hasOverflow]: core.bool
  }));
  dart.setSetterSignature(vlist.RenderRelativeWidthColumn, () => ({
    __proto__: dart.getSetters(vlist.RenderRelativeWidthColumn.__proto__),
    textBaseline: ui.TextBaseline,
    baselineReferenceWidgetIndex: core.int,
    crossAxisAlignment: flex.CrossAxisAlignment,
    textDirection: dart.nullable(ui.TextDirection)
  }));
  dart.setLibraryUri(vlist.RenderRelativeWidthColumn, I[0]);
  dart.setFieldSignature(vlist.RenderRelativeWidthColumn, () => ({
    __proto__: dart.getFields(vlist.RenderRelativeWidthColumn.__proto__),
    [_textBaseline]: dart.fieldType(ui.TextBaseline),
    [_baselineReferenceWidgetIndex]: dart.fieldType(core.int),
    [_crossAxisAlignment]: dart.fieldType(flex.CrossAxisAlignment),
    [_textDirection]: dart.fieldType(dart.nullable(ui.TextDirection)),
    [_overflow]: dart.fieldType(dart.nullable(core.double)),
    distanceToBaseline: dart.fieldType(dart.nullable(core.double))
  }));
  dart.trackLibraries("packages/flutter_math_fork/src/render/layout/vlist.dart", {
    "package:flutter_math_fork/src/render/layout/vlist.dart": vlist
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["vlist.dart"],"names":[],"mappings":"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","file":"../../../../../../../../../../../C:/packages/flutter_math_fork/src/render/layout/vlist.dart.lib.js"}');
  // Exports:
  return {
    src__render__layout__vlist: vlist
  };
}));

//# sourceMappingURL=vlist.dart.lib.js.map
