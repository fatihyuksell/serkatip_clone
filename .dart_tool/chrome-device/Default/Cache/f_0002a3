define(['dart_sdk', 'packages/flutter/src/painting/basic_types.dart', 'packages/flutter/src/foundation/debug.dart', 'packages/flutter/src/rendering/layer.dart', 'packages/quiver/src/iterables/min_max.dart', 'packages/quiver/src/iterables/zip.dart'], (function load__packages__flutter_layout_grid__src__rendering__track_size_dart(dart_sdk, packages__flutter__src__painting__basic_types$46dart, packages__flutter__src__foundation__debug$46dart, packages__flutter__src__rendering__layer$46dart, packages__quiver__src__iterables__min_max$46dart, packages__quiver__src__iterables__zip$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const ui = dart_sdk.ui;
  const _interceptors = dart_sdk._interceptors;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const basic_types = packages__flutter__src__painting__basic_types$46dart.src__painting__basic_types;
  const diagnostics = packages__flutter__src__foundation__debug$46dart.src__foundation__diagnostics;
  const box = packages__flutter__src__rendering__layer$46dart.src__rendering__box;
  const min_max = packages__quiver__src__iterables__min_max$46dart.src__iterables__min_max;
  const zip = packages__quiver__src__iterables__zip$46dart.src__iterables__zip;
  var track_size = Object.create(dart.library);
  var $runtimeType = dartx.runtimeType;
  var $_equals = dartx._equals;
  var $map = dartx.map;
  var $hashCode = dartx.hashCode;
  var $length = dartx.length;
  var $_get = dartx._get;
  var $every = dartx.every;
  dart._checkModuleNullSafetyMode(false);
  var T = {
    TrackTypeL: () => (T.TrackTypeL = dart.constFn(dart.legacy(track_size.TrackType)))(),
    RenderBoxTodouble: () => (T.RenderBoxTodouble = dart.constFn(dart.fnType(core.double, [box.RenderBox])))(),
    ListOfTrackSize: () => (T.ListOfTrackSize = dart.constFn(core.List$(track_size.TrackSize)))(),
    JSArrayOfListOfTrackSize: () => (T.JSArrayOfListOfTrackSize = dart.constFn(_interceptors.JSArray$(T.ListOfTrackSize())))(),
    ListOfTrackSizeTobool: () => (T.ListOfTrackSizeTobool = dart.constFn(dart.fnType(core.bool, [T.ListOfTrackSize()])))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.const({
        __proto__: track_size.TrackType.prototype,
        [_name$]: "TrackType.column",
        index: 0
      });
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: track_size.TrackType.prototype,
        [_name$]: "TrackType.row",
        index: 1
      });
    },
    get C2() {
      return C[2] = dart.constList([C[0] || CT.C0, C[1] || CT.C1], T.TrackTypeL());
    }
  }, false);
  var C = Array(3).fill(void 0);
  var I = [
    "file:///D:/src/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_layout_grid-1.0.3/lib/src/rendering/track_size.dart",
    "package:flutter_layout_grid/src/rendering/track_size.dart"
  ];
  var _name$ = dart.privateName(track_size, "_name");
  track_size.TrackType = class TrackType extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (track_size.TrackType.new = function(index, _name) {
    if (index == null) dart.nullFailed(I[0], 7, 6, "index");
    if (_name == null) dart.nullFailed(I[0], 7, 6, "_name");
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = track_size.TrackType.prototype;
  dart.addTypeTests(track_size.TrackType);
  dart.addTypeCaches(track_size.TrackType);
  dart.setLibraryUri(track_size.TrackType, I[1]);
  dart.setFieldSignature(track_size.TrackType, () => ({
    __proto__: dart.getFields(track_size.TrackType.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(track_size.TrackType, ['toString']);
  track_size.TrackType.column = C[0] || CT.C0;
  track_size.TrackType.row = C[1] || CT.C1;
  track_size.TrackType.values = C[2] || CT.C2;
  var debugLabel$ = dart.privateName(track_size, "TrackSize.debugLabel");
  var _itemMinIntrinsicSizeOnAxis = dart.privateName(track_size, "_itemMinIntrinsicSizeOnAxis");
  var _itemMaxIntrinsicSizeOnAxis = dart.privateName(track_size, "_itemMaxIntrinsicSizeOnAxis");
  const Object_Diagnosticable$36 = class Object_Diagnosticable extends core.Object {};
  (Object_Diagnosticable$36.new = function() {
  }).prototype = Object_Diagnosticable$36.prototype;
  dart.applyMixin(Object_Diagnosticable$36, diagnostics.Diagnosticable);
  track_size.TrackSize = class TrackSize extends Object_Diagnosticable$36 {
    get debugLabel() {
      return this[debugLabel$];
    }
    set debugLabel(value) {
      super.debugLabel = value;
    }
    isFixedForConstraints(type, gridConstraints) {
      if (type == null) dart.nullFailed(I[0], 41, 40, "type");
      if (gridConstraints == null) dart.nullFailed(I[0], 41, 61, "gridConstraints");
      return false;
    }
    get isIntrinsic() {
      return false;
    }
    get isFlexible() {
      return false;
    }
    get flex() {
      return null;
    }
    [_itemMinIntrinsicSizeOnAxis](item, axis, crossAxisSize) {
      if (item == null) dart.nullFailed(I[0], 114, 17, "item");
      if (axis == null) dart.nullFailed(I[0], 114, 28, "axis");
      if (crossAxisSize == null) dart.nullFailed(I[0], 114, 41, "crossAxisSize");
      return axis == basic_types.Axis.horizontal ? item.getMinIntrinsicWidth(crossAxisSize) : item.getMinIntrinsicHeight(crossAxisSize);
    }
    [_itemMaxIntrinsicSizeOnAxis](item, axis, crossAxisSize) {
      if (item == null) dart.nullFailed(I[0], 124, 17, "item");
      if (axis == null) dart.nullFailed(I[0], 124, 28, "axis");
      if (crossAxisSize == null) dart.nullFailed(I[0], 124, 41, "crossAxisSize");
      return axis == basic_types.Axis.horizontal ? item.getMaxIntrinsicWidth(crossAxisSize) : item.getMaxIntrinsicHeight(crossAxisSize);
    }
    debugFillProperties(properties) {
      if (properties == null) dart.nullFailed(I[0], 131, 56, "properties");
      super.debugFillProperties(properties);
      if (this.debugLabel != null) {
        properties.add(new diagnostics.StringProperty.new("debugLabel", this.debugLabel));
      }
    }
  };
  (track_size.TrackSize.new = function(opts) {
    let debugLabel = opts && 'debugLabel' in opts ? opts.debugLabel : null;
    this[debugLabel$] = debugLabel;
    ;
  }).prototype = track_size.TrackSize.prototype;
  dart.addTypeTests(track_size.TrackSize);
  dart.addTypeCaches(track_size.TrackSize);
  dart.setMethodSignature(track_size.TrackSize, () => ({
    __proto__: dart.getMethods(track_size.TrackSize.__proto__),
    isFixedForConstraints: dart.fnType(core.bool, [track_size.TrackType, box.BoxConstraints]),
    [_itemMinIntrinsicSizeOnAxis]: dart.fnType(core.double, [box.RenderBox, basic_types.Axis, core.double]),
    [_itemMaxIntrinsicSizeOnAxis]: dart.fnType(core.double, [box.RenderBox, basic_types.Axis, core.double])
  }));
  dart.setGetterSignature(track_size.TrackSize, () => ({
    __proto__: dart.getGetters(track_size.TrackSize.__proto__),
    isIntrinsic: core.bool,
    isFlexible: core.bool,
    flex: dart.nullable(core.double)
  }));
  dart.setLibraryUri(track_size.TrackSize, I[1]);
  dart.setFieldSignature(track_size.TrackSize, () => ({
    __proto__: dart.getFields(track_size.TrackSize.__proto__),
    debugLabel: dart.finalFieldType(dart.nullable(core.String))
  }));
  var sizeInPx$ = dart.privateName(track_size, "FixedTrackSize.sizeInPx");
  track_size.FixedTrackSize = class FixedTrackSize extends track_size.TrackSize {
    get sizeInPx() {
      return this[sizeInPx$];
    }
    set sizeInPx(value) {
      super.sizeInPx = value;
    }
    isFixedForConstraints(type, constraints) {
      if (type == null) dart.nullFailed(I[0], 152, 40, "type");
      if (constraints == null) dart.nullFailed(I[0], 152, 61, "constraints");
      return true;
    }
    minIntrinsicSize(type, items, opts) {
      if (type == null) dart.nullFailed(I[0], 158, 15, "type");
      if (items == null) dart.nullFailed(I[0], 159, 25, "items");
      let crossAxisSizeForItem = opts && 'crossAxisSizeForItem' in opts ? opts.crossAxisSizeForItem : null;
      return this.sizeInPx;
    }
    maxIntrinsicSize(type, items, opts) {
      if (type == null) dart.nullFailed(I[0], 167, 15, "type");
      if (items == null) dart.nullFailed(I[0], 168, 25, "items");
      let crossAxisSizeForItem = opts && 'crossAxisSizeForItem' in opts ? opts.crossAxisSizeForItem : null;
      if (crossAxisSizeForItem == null) dart.nullFailed(I[0], 169, 41, "crossAxisSizeForItem");
      return this.sizeInPx;
    }
    get hashCode() {
      return ui.hashValues(this.sizeInPx, this.debugLabel);
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) return true;
      if (!dart.equals(dart.runtimeType(other), this[$runtimeType])) return false;
      return track_size.FixedTrackSize.is(other) && other.sizeInPx == this.sizeInPx;
    }
    debugFillProperties(properties) {
      if (properties == null) dart.nullFailed(I[0], 185, 56, "properties");
      super.debugFillProperties(properties);
      properties.add(new diagnostics.DoubleProperty.new("sizeInPx", this.sizeInPx));
    }
  };
  (track_size.FixedTrackSize.new = function(sizeInPx, opts) {
    if (sizeInPx == null) dart.nullFailed(I[0], 144, 29, "sizeInPx");
    let debugLabel = opts && 'debugLabel' in opts ? opts.debugLabel : null;
    this[sizeInPx$] = sizeInPx;
    track_size.FixedTrackSize.__proto__.new.call(this, {debugLabel: debugLabel});
    ;
  }).prototype = track_size.FixedTrackSize.prototype;
  dart.addTypeTests(track_size.FixedTrackSize);
  dart.addTypeCaches(track_size.FixedTrackSize);
  dart.setMethodSignature(track_size.FixedTrackSize, () => ({
    __proto__: dart.getMethods(track_size.FixedTrackSize.__proto__),
    minIntrinsicSize: dart.fnType(core.double, [track_size.TrackType, core.Iterable$(box.RenderBox)], {crossAxisSizeForItem: dart.nullable(dart.fnType(core.double, [box.RenderBox]))}, {}),
    maxIntrinsicSize: dart.fnType(core.double, [track_size.TrackType, core.Iterable$(box.RenderBox)], {}, {crossAxisSizeForItem: dart.fnType(core.double, [box.RenderBox])}),
    _equals: dart.fnType(core.bool, [dart.dynamic]),
    [$_equals]: dart.fnType(core.bool, [dart.dynamic])
  }));
  dart.setLibraryUri(track_size.FixedTrackSize, I[1]);
  dart.setFieldSignature(track_size.FixedTrackSize, () => ({
    __proto__: dart.getFields(track_size.FixedTrackSize.__proto__),
    sizeInPx: dart.finalFieldType(core.double)
  }));
  dart.defineExtensionMethods(track_size.FixedTrackSize, ['_equals']);
  dart.defineExtensionAccessors(track_size.FixedTrackSize, ['hashCode']);
  var flexFactor$ = dart.privateName(track_size, "FlexibleTrackSize.flexFactor");
  track_size.FlexibleTrackSize = class FlexibleTrackSize extends track_size.TrackSize {
    get flexFactor() {
      return this[flexFactor$];
    }
    set flexFactor(value) {
      super.flexFactor = value;
    }
    get isFlexible() {
      return true;
    }
    minIntrinsicSize(type, items, opts) {
      if (type == null) dart.nullFailed(I[0], 221, 15, "type");
      if (items == null) dart.nullFailed(I[0], 222, 25, "items");
      let crossAxisSizeForItem = opts && 'crossAxisSizeForItem' in opts ? opts.crossAxisSizeForItem : null;
      return 0.0;
    }
    maxIntrinsicSize(type, items, opts) {
      if (type == null) dart.nullFailed(I[0], 230, 15, "type");
      if (items == null) dart.nullFailed(I[0], 231, 25, "items");
      let crossAxisSizeForItem = opts && 'crossAxisSizeForItem' in opts ? opts.crossAxisSizeForItem : null;
      if (crossAxisSizeForItem == null) dart.nullFailed(I[0], 232, 41, "crossAxisSizeForItem");
      return 0.0;
    }
    get flex() {
      return this.flexFactor;
    }
    debugFillProperties(properties) {
      if (properties == null) dart.nullFailed(I[0], 241, 56, "properties");
      super.debugFillProperties(properties);
      properties.add(new diagnostics.DoubleProperty.new("flex", this.flex));
    }
    get hashCode() {
      return ui.hashValues(this.flex, this.debugLabel);
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) return true;
      if (!dart.equals(dart.runtimeType(other), this[$runtimeType])) return false;
      return track_size.FlexibleTrackSize.is(other) && other.flex == this.flex;
    }
  };
  (track_size.FlexibleTrackSize.new = function(flexFactor, opts) {
    if (flexFactor == null) dart.nullFailed(I[0], 203, 32, "flexFactor");
    let debugLabel = opts && 'debugLabel' in opts ? opts.debugLabel : null;
    this[flexFactor$] = flexFactor;
    if (!(dart.notNull(flexFactor) > 0)) dart.assertFailed(null, I[0], 204, 16, "flexFactor > 0");
    track_size.FlexibleTrackSize.__proto__.new.call(this, {debugLabel: debugLabel});
    ;
  }).prototype = track_size.FlexibleTrackSize.prototype;
  dart.addTypeTests(track_size.FlexibleTrackSize);
  dart.addTypeCaches(track_size.FlexibleTrackSize);
  dart.setMethodSignature(track_size.FlexibleTrackSize, () => ({
    __proto__: dart.getMethods(track_size.FlexibleTrackSize.__proto__),
    minIntrinsicSize: dart.fnType(core.double, [track_size.TrackType, core.Iterable$(box.RenderBox)], {crossAxisSizeForItem: dart.nullable(dart.fnType(core.double, [box.RenderBox]))}, {}),
    maxIntrinsicSize: dart.fnType(core.double, [track_size.TrackType, core.Iterable$(box.RenderBox)], {}, {crossAxisSizeForItem: dart.fnType(core.double, [box.RenderBox])}),
    _equals: dart.fnType(core.bool, [dart.dynamic]),
    [$_equals]: dart.fnType(core.bool, [dart.dynamic])
  }));
  dart.setGetterSignature(track_size.FlexibleTrackSize, () => ({
    __proto__: dart.getGetters(track_size.FlexibleTrackSize.__proto__),
    flex: core.double
  }));
  dart.setLibraryUri(track_size.FlexibleTrackSize, I[1]);
  dart.setFieldSignature(track_size.FlexibleTrackSize, () => ({
    __proto__: dart.getFields(track_size.FlexibleTrackSize.__proto__),
    flexFactor: dart.finalFieldType(core.double)
  }));
  dart.defineExtensionMethods(track_size.FlexibleTrackSize, ['_equals']);
  dart.defineExtensionAccessors(track_size.FlexibleTrackSize, ['hashCode']);
  track_size.IntrinsicContentTrackSize = class IntrinsicContentTrackSize extends track_size.TrackSize {
    get isIntrinsic() {
      return true;
    }
    minIntrinsicSize(type, items, opts) {
      if (type == null) dart.nullFailed(I[0], 272, 15, "type");
      if (items == null) dart.nullFailed(I[0], 273, 25, "items");
      let crossAxisSizeForItem = opts && 'crossAxisSizeForItem' in opts ? opts.crossAxisSizeForItem : null;
      crossAxisSizeForItem == null ? crossAxisSizeForItem = dart.fn(_ => {
        if (_ == null) dart.nullFailed(I[0], 276, 31, "_");
        return 1 / 0;
      }, T.RenderBoxTodouble()) : null;
      let minContentContributions = items[$map](core.double, dart.fn(item => {
        if (item == null) dart.nullFailed(I[0], 278, 8, "item");
        return this[_itemMinIntrinsicSizeOnAxis](item, track_size.measurementAxisForTrackType(type), dart.nullCheck(crossAxisSizeForItem)(item));
      }, T.RenderBoxTodouble()));
      return dart.nullCheck(min_max.max(core.double, minContentContributions));
    }
    maxIntrinsicSize(type, items, opts) {
      if (type == null) dart.nullFailed(I[0], 291, 15, "type");
      if (items == null) dart.nullFailed(I[0], 292, 25, "items");
      let crossAxisSizeForItem = opts && 'crossAxisSizeForItem' in opts ? opts.crossAxisSizeForItem : null;
      if (crossAxisSizeForItem == null) dart.nullFailed(I[0], 293, 41, "crossAxisSizeForItem");
      let maxContentContributions = items[$map](core.double, dart.fn(item => {
        if (item == null) dart.nullFailed(I[0], 296, 8, "item");
        return this[_itemMaxIntrinsicSizeOnAxis](item, track_size.measurementAxisForTrackType(type), crossAxisSizeForItem(item));
      }, T.RenderBoxTodouble()));
      return dart.nullCheck(min_max.max(core.double, maxContentContributions));
    }
    get hashCode() {
      return dart.hashCode(this.debugLabel);
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) return true;
      return dart.equals(dart.runtimeType(other), this[$runtimeType]);
    }
  };
  (track_size.IntrinsicContentTrackSize.new = function(opts) {
    let debugLabel = opts && 'debugLabel' in opts ? opts.debugLabel : null;
    track_size.IntrinsicContentTrackSize.__proto__.new.call(this, {debugLabel: debugLabel});
    ;
  }).prototype = track_size.IntrinsicContentTrackSize.prototype;
  dart.addTypeTests(track_size.IntrinsicContentTrackSize);
  dart.addTypeCaches(track_size.IntrinsicContentTrackSize);
  dart.setMethodSignature(track_size.IntrinsicContentTrackSize, () => ({
    __proto__: dart.getMethods(track_size.IntrinsicContentTrackSize.__proto__),
    minIntrinsicSize: dart.fnType(core.double, [track_size.TrackType, core.Iterable$(box.RenderBox)], {crossAxisSizeForItem: dart.nullable(dart.fnType(core.double, [box.RenderBox]))}, {}),
    maxIntrinsicSize: dart.fnType(core.double, [track_size.TrackType, core.Iterable$(box.RenderBox)], {}, {crossAxisSizeForItem: dart.fnType(core.double, [box.RenderBox])}),
    _equals: dart.fnType(core.bool, [dart.dynamic]),
    [$_equals]: dart.fnType(core.bool, [dart.dynamic])
  }));
  dart.setLibraryUri(track_size.IntrinsicContentTrackSize, I[1]);
  dart.defineExtensionMethods(track_size.IntrinsicContentTrackSize, ['_equals']);
  dart.defineExtensionAccessors(track_size.IntrinsicContentTrackSize, ['hashCode']);
  track_size.mainAxisForTrackType = function mainAxisForTrackType(type) {
    if (type == null) dart.nullFailed(I[0], 13, 37, "type");
    return type == track_size.TrackType.column ? basic_types.Axis.vertical : basic_types.Axis.horizontal;
  };
  track_size.measurementAxisForTrackType = function measurementAxisForTrackType(type) {
    if (type == null) dart.nullFailed(I[0], 18, 44, "type");
    return type == track_size.TrackType.column ? basic_types.Axis.horizontal : basic_types.Axis.vertical;
  };
  track_size.trackSizeListsEqual = function trackSizeListsEqual(a, b) {
    if (a == null) dart.nullFailed(I[0], 315, 42, "a");
    if (b == null) dart.nullFailed(I[0], 315, 61, "b");
    if (a == b) return true;
    return a[$length] == b[$length] && dart.test(zip.zip(track_size.TrackSize, T.JSArrayOfListOfTrackSize().of([a, b]))[$every](dart.fn(pair => {
      if (pair == null) dart.nullFailed(I[0], 318, 26, "pair");
      return dart.equals(pair[$_get](0), pair[$_get](1));
    }, T.ListOfTrackSizeTobool())));
  };
  dart.trackLibraries("packages/flutter_layout_grid/src/rendering/track_size.dart", {
    "package:flutter_layout_grid/src/rendering/track_size.dart": track_size
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["track_size.dart"],"names":[],"mappings":"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","file":"../../../../../../../../../../C:/packages/flutter_layout_grid/src/rendering/track_size.dart.lib.js"}');
  // Exports:
  return {
    src__rendering__track_size: track_size
  };
}));

//# sourceMappingURL=track_size.dart.lib.js.map
