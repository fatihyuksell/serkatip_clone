define(['dart_sdk', 'packages/flutter/src/painting/basic_types.dart', 'packages/quiver/src/core/hash.dart'], (function load__packages__flutter_layout_grid__src__foundation__placement_dart(dart_sdk, packages__flutter__src__painting__basic_types$46dart, packages__quiver__src__core__hash$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const math = dart_sdk.math;
  const _js_helper = dart_sdk._js_helper;
  const convert = dart_sdk.convert;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const basic_types = packages__flutter__src__painting__basic_types$46dart.src__painting__basic_types;
  const hash = packages__quiver__src__core__hash$46dart.src__core__hash;
  var placement = Object.create(dart.library);
  var $runtimeType = dartx.runtimeType;
  var $_equals = dartx._equals;
  var $length = dartx.length;
  var $_get = dartx._get;
  var $trim = dartx.trim;
  var $map = dartx.map;
  var $isNotEmpty = dartx.isNotEmpty;
  var $where = dartx.where;
  var $toList = dartx.toList;
  var $split = dartx.split;
  var $putIfAbsent = dartx.putIfAbsent;
  dart._checkModuleNullSafetyMode(false);
  var T = {
    IdentityMapOfString$_GridAreaBuilder: () => (T.IdentityMapOfString$_GridAreaBuilder = dart.constFn(_js_helper.IdentityMap$(core.String, placement._GridAreaBuilder)))(),
    StringToString: () => (T.StringToString = dart.constFn(dart.fnType(core.String, [core.String])))(),
    StringTobool: () => (T.StringTobool = dart.constFn(dart.fnType(core.bool, [core.String])))(),
    VoidTo_GridAreaBuilder: () => (T.VoidTo_GridAreaBuilder = dart.constFn(dart.fnType(placement._GridAreaBuilder, [])))(),
    MapEntryOfString$GridArea: () => (T.MapEntryOfString$GridArea = dart.constFn(core.MapEntry$(core.String, placement.GridArea)))(),
    StringAnd_GridAreaBuilderToMapEntryOfString$GridArea: () => (T.StringAnd_GridAreaBuilderToMapEntryOfString$GridArea = dart.constFn(dart.fnType(T.MapEntryOfString$GridArea(), [core.String, placement._GridAreaBuilder])))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  var I = [
    "file:///D:/src/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_layout_grid-1.0.3/lib/src/foundation/placement.dart",
    "package:flutter_layout_grid/src/foundation/placement.dart"
  ];
  var name$ = dart.privateName(placement, "GridArea.name");
  var columnStart$ = dart.privateName(placement, "GridArea.columnStart");
  var rowStart$ = dart.privateName(placement, "GridArea.rowStart");
  var columnEnd$ = dart.privateName(placement, "GridArea.columnEnd");
  var rowEnd$ = dart.privateName(placement, "GridArea.rowEnd");
  placement.GridArea = class GridArea extends core.Object {
    get name() {
      return this[name$];
    }
    set name(value) {
      super.name = value;
    }
    get columnStart() {
      return this[columnStart$];
    }
    set columnStart(value) {
      super.columnStart = value;
    }
    get rowStart() {
      return this[rowStart$];
    }
    set rowStart(value) {
      super.rowStart = value;
    }
    get columnEnd() {
      return this[columnEnd$];
    }
    set columnEnd(value) {
      super.columnEnd = value;
    }
    get rowEnd() {
      return this[rowEnd$];
    }
    set rowEnd(value) {
      super.rowEnd = value;
    }
    get columnSpan() {
      return dart.notNull(this.columnEnd) - dart.notNull(this.columnStart);
    }
    get rowSpan() {
      return dart.notNull(this.rowEnd) - dart.notNull(this.rowStart);
    }
    startForAxis(axis) {
      if (axis == null) dart.nullFailed(I[0], 40, 25, "axis");
      return axis == basic_types.Axis.horizontal ? this.columnStart : this.rowStart;
    }
    endForAxis(axis) {
      if (axis == null) dart.nullFailed(I[0], 42, 23, "axis");
      return axis == basic_types.Axis.horizontal ? this.columnEnd : this.rowEnd;
    }
    spanForAxis(axis) {
      if (axis == null) dart.nullFailed(I[0], 43, 24, "axis");
      return dart.notNull(this.endForAxis(axis)) - dart.notNull(this.startForAxis(axis));
    }
    get hashCode() {
      return hash.hashObjects([this.name, this.columnStart, this.columnEnd, this.rowStart, this.rowEnd]);
    }
    _equals(other) {
      if (other == null) return false;
      if (!dart.equals(dart.runtimeType(other), this[$runtimeType])) return false;
      if (other === this) return true;
      return placement.GridArea.is(other) && other.name == this.name && other.columnStart == this.columnStart && other.columnEnd == this.columnEnd && other.rowStart == this.rowStart && other.rowEnd == this.rowEnd;
    }
    toString() {
      return "GridArea(" + (this.name != null ? "name=" + dart.str(this.name) + ", " : "") + ("columnSpan=[" + dart.str(this.columnStart) + "–" + dart.str(this.columnEnd) + "], rowSpan=[" + dart.str(this.rowStart) + "–" + dart.str(this.rowEnd) + "])");
    }
  };
  (placement.GridArea.new = function(opts) {
    let name = opts && 'name' in opts ? opts.name : null;
    let columnStart = opts && 'columnStart' in opts ? opts.columnStart : null;
    if (columnStart == null) dart.nullFailed(I[0], 13, 19, "columnStart");
    let columnEnd = opts && 'columnEnd' in opts ? opts.columnEnd : null;
    if (columnEnd == null) dart.nullFailed(I[0], 14, 19, "columnEnd");
    let rowStart = opts && 'rowStart' in opts ? opts.rowStart : null;
    if (rowStart == null) dart.nullFailed(I[0], 15, 19, "rowStart");
    let rowEnd = opts && 'rowEnd' in opts ? opts.rowEnd : null;
    if (rowEnd == null) dart.nullFailed(I[0], 16, 19, "rowEnd");
    this[name$] = name;
    this[columnStart$] = columnStart;
    this[columnEnd$] = columnEnd;
    this[rowStart$] = rowStart;
    this[rowEnd$] = rowEnd;
    ;
  }).prototype = placement.GridArea.prototype;
  (placement.GridArea.withSpans = function(opts) {
    let name = opts && 'name' in opts ? opts.name : null;
    let columnStart = opts && 'columnStart' in opts ? opts.columnStart : null;
    if (columnStart == null) dart.nullFailed(I[0], 21, 19, "columnStart");
    let columnSpan = opts && 'columnSpan' in opts ? opts.columnSpan : null;
    if (columnSpan == null) dart.nullFailed(I[0], 22, 18, "columnSpan");
    let rowStart = opts && 'rowStart' in opts ? opts.rowStart : null;
    if (rowStart == null) dart.nullFailed(I[0], 23, 19, "rowStart");
    let rowSpan = opts && 'rowSpan' in opts ? opts.rowSpan : null;
    if (rowSpan == null) dart.nullFailed(I[0], 24, 18, "rowSpan");
    this[name$] = name;
    this[columnStart$] = columnStart;
    this[rowStart$] = rowStart;
    this[columnEnd$] = dart.notNull(columnStart) + dart.notNull(columnSpan);
    this[rowEnd$] = dart.notNull(rowStart) + dart.notNull(rowSpan);
    ;
  }).prototype = placement.GridArea.prototype;
  dart.addTypeTests(placement.GridArea);
  dart.addTypeCaches(placement.GridArea);
  dart.setMethodSignature(placement.GridArea, () => ({
    __proto__: dart.getMethods(placement.GridArea.__proto__),
    startForAxis: dart.fnType(core.int, [basic_types.Axis]),
    endForAxis: dart.fnType(core.int, [basic_types.Axis]),
    spanForAxis: dart.fnType(core.int, [basic_types.Axis]),
    _equals: dart.fnType(core.bool, [dart.dynamic]),
    [$_equals]: dart.fnType(core.bool, [dart.dynamic])
  }));
  dart.setGetterSignature(placement.GridArea, () => ({
    __proto__: dart.getGetters(placement.GridArea.__proto__),
    columnSpan: core.int,
    rowSpan: core.int
  }));
  dart.setLibraryUri(placement.GridArea, I[1]);
  dart.setFieldSignature(placement.GridArea, () => ({
    __proto__: dart.getFields(placement.GridArea.__proto__),
    name: dart.finalFieldType(dart.nullable(core.String)),
    columnStart: dart.finalFieldType(core.int),
    rowStart: dart.finalFieldType(core.int),
    columnEnd: dart.finalFieldType(core.int),
    rowEnd: dart.finalFieldType(core.int)
  }));
  dart.defineExtensionMethods(placement.GridArea, ['_equals', 'toString']);
  dart.defineExtensionAccessors(placement.GridArea, ['hashCode']);
  var columnCount$ = dart.privateName(placement, "NamedGridAreas.columnCount");
  var rowCount$ = dart.privateName(placement, "NamedGridAreas.rowCount");
  var _areas = dart.privateName(placement, "_areas");
  placement.NamedGridAreas = class NamedGridAreas extends core.Object {
    get columnCount() {
      return this[columnCount$];
    }
    set columnCount(value) {
      super.columnCount = value;
    }
    get rowCount() {
      return this[rowCount$];
    }
    set rowCount(value) {
      super.rowCount = value;
    }
    get length() {
      return this[_areas][$length];
    }
    _get(areaName) {
      return this[_areas][$_get](dart.nullCheck(areaName));
    }
  };
  (placement.NamedGridAreas.new = function(opts) {
    let columnCount = opts && 'columnCount' in opts ? opts.columnCount : null;
    if (columnCount == null) dart.nullFailed(I[0], 79, 19, "columnCount");
    let rowCount = opts && 'rowCount' in opts ? opts.rowCount : null;
    if (rowCount == null) dart.nullFailed(I[0], 80, 19, "rowCount");
    let areas = opts && 'areas' in opts ? opts.areas : null;
    if (areas == null) dart.nullFailed(I[0], 81, 36, "areas");
    this[columnCount$] = columnCount;
    this[rowCount$] = rowCount;
    this[_areas] = areas;
    ;
  }).prototype = placement.NamedGridAreas.prototype;
  dart.addTypeTests(placement.NamedGridAreas);
  dart.addTypeCaches(placement.NamedGridAreas);
  dart.setMethodSignature(placement.NamedGridAreas, () => ({
    __proto__: dart.getMethods(placement.NamedGridAreas.__proto__),
    _get: dart.fnType(dart.nullable(placement.GridArea), [dart.nullable(core.String)])
  }));
  dart.setGetterSignature(placement.NamedGridAreas, () => ({
    __proto__: dart.getGetters(placement.NamedGridAreas.__proto__),
    length: core.int
  }));
  dart.setLibraryUri(placement.NamedGridAreas, I[1]);
  dart.setFieldSignature(placement.NamedGridAreas, () => ({
    __proto__: dart.getFields(placement.NamedGridAreas.__proto__),
    columnCount: dart.finalFieldType(core.int),
    rowCount: dart.finalFieldType(core.int),
    [_areas]: dart.finalFieldType(core.Map$(core.String, placement.GridArea))
  }));
  var _minColumn = dart.privateName(placement, "_minColumn");
  var _maxColumn = dart.privateName(placement, "_maxColumn");
  var _minRow = dart.privateName(placement, "_minRow");
  var _maxRow = dart.privateName(placement, "_maxRow");
  var _missingCells = dart.privateName(placement, "_missingCells");
  var _ensureColumnInRange = dart.privateName(placement, "_ensureColumnInRange");
  var _addedColumnCount = dart.privateName(placement, "_addedColumnCount");
  var _ensureRowInRange = dart.privateName(placement, "_ensureRowInRange");
  var _addedRowCount = dart.privateName(placement, "_addedRowCount");
  placement._GridAreaBuilder = class _GridAreaBuilder extends core.Object {
    addCell(column, row) {
      if (column == null) dart.nullFailed(I[0], 184, 20, "column");
      if (row == null) dart.nullFailed(I[0], 184, 32, "row");
      if (this[_minColumn] == null) {
        this[_minColumn] = this[_maxColumn] = column;
        this[_missingCells] = dart.notNull(this[_missingCells]) + 1;
      } else if (dart.test(this[_ensureColumnInRange](column))) {
        this[_missingCells] = dart.notNull(this[_missingCells]) + dart.notNull(this[_addedColumnCount](column)) * (dart.nullCheck(this[_maxRow]) - dart.nullCheck(this[_minRow]) + 1);
        this[_minColumn] = math.min(core.int, dart.nullCheck(this[_minColumn]), column);
        this[_maxColumn] = math.max(core.int, dart.nullCheck(this[_maxColumn]), column);
      } else {
        dart.throw(new core.ArgumentError.new("Area disjoint, column=" + dart.str(column) + " row=" + dart.str(row) + " name=" + dart.str(this.areaName)));
      }
      if (this[_minRow] == null) {
        this[_minRow] = this[_maxRow] = row;
      } else if (dart.test(this[_ensureRowInRange](row))) {
        this[_missingCells] = dart.notNull(this[_missingCells]) + dart.notNull(this[_addedRowCount](row)) * (dart.nullCheck(this[_maxColumn]) - dart.nullCheck(this[_minColumn]) + 1);
        this[_minRow] = math.min(core.int, dart.nullCheck(this[_minRow]), row);
        this[_maxRow] = math.max(core.int, dart.nullCheck(this[_maxRow]), row);
      } else {
        dart.throw(new core.ArgumentError.new("Area disjoint, column=" + dart.str(column) + " row=" + dart.str(row) + " name=" + dart.str(this.areaName)));
      }
      this[_missingCells] = dart.notNull(this[_missingCells]) - 1;
    }
    [_ensureColumnInRange](column) {
      if (column == null) dart.nullFailed(I[0], 211, 33, "column");
      return dart.notNull(this[_addedColumnCount](column)) <= 1;
    }
    [_addedColumnCount](column) {
      if (column == null) dart.nullFailed(I[0], 212, 29, "column");
      return dart.notNull(column) <= dart.nullCheck(this[_minColumn]) ? dart.nullCheck(this[_minColumn]) - dart.notNull(column) : dart.notNull(column) >= dart.nullCheck(this[_maxColumn]) ? dart.notNull(column) - dart.nullCheck(this[_maxColumn]) : 0;
    }
    [_ensureRowInRange](row) {
      if (row == null) dart.nullFailed(I[0], 220, 30, "row");
      return dart.notNull(this[_addedRowCount](row)) <= 1;
    }
    [_addedRowCount](row) {
      if (row == null) dart.nullFailed(I[0], 221, 26, "row");
      return dart.notNull(row) <= dart.nullCheck(this[_minRow]) ? dart.nullCheck(this[_minRow]) - dart.notNull(row) : dart.notNull(row) >= dart.nullCheck(this[_maxRow]) ? dart.notNull(row) - dart.nullCheck(this[_maxRow]) : 0;
    }
    build() {
      if (this[_missingCells] !== 0) {
        dart.throw(new core.ArgumentError.new("Missing cells from grid area template. " + "Areas must be rectangular. name=" + dart.str(this.areaName)));
      }
      return new placement.GridArea.new({name: this.areaName, columnStart: dart.nullCheck(this[_minColumn]), columnEnd: dart.nullCheck(this[_maxColumn]) + 1, rowStart: dart.nullCheck(this[_minRow]), rowEnd: dart.nullCheck(this[_maxRow]) + 1});
    }
  };
  (placement._GridAreaBuilder.new = function(areaName) {
    if (areaName == null) dart.nullFailed(I[0], 170, 25, "areaName");
    this[_minColumn] = null;
    this[_maxColumn] = null;
    this[_minRow] = null;
    this[_maxRow] = null;
    this[_missingCells] = 0;
    this.areaName = areaName;
    ;
  }).prototype = placement._GridAreaBuilder.prototype;
  dart.addTypeTests(placement._GridAreaBuilder);
  dart.addTypeCaches(placement._GridAreaBuilder);
  dart.setMethodSignature(placement._GridAreaBuilder, () => ({
    __proto__: dart.getMethods(placement._GridAreaBuilder.__proto__),
    addCell: dart.fnType(dart.void, [core.int, core.int]),
    [_ensureColumnInRange]: dart.fnType(core.bool, [core.int]),
    [_addedColumnCount]: dart.fnType(core.int, [core.int]),
    [_ensureRowInRange]: dart.fnType(core.bool, [core.int]),
    [_addedRowCount]: dart.fnType(core.int, [core.int]),
    build: dart.fnType(placement.GridArea, [])
  }));
  dart.setLibraryUri(placement._GridAreaBuilder, I[1]);
  dart.setFieldSignature(placement._GridAreaBuilder, () => ({
    __proto__: dart.getFields(placement._GridAreaBuilder.__proto__),
    areaName: dart.finalFieldType(core.String),
    [_minColumn]: dart.fieldType(dart.nullable(core.int)),
    [_maxColumn]: dart.fieldType(dart.nullable(core.int)),
    [_minRow]: dart.fieldType(dart.nullable(core.int)),
    [_maxRow]: dart.fieldType(dart.nullable(core.int)),
    [_missingCells]: dart.fieldType(core.int)
  }));
  placement.parseNamedAreasSpec = function parseNamedAreasSpec(namedAreasSpec) {
    if (namedAreasSpec == null) dart.nullFailed(I[0], 114, 43, "namedAreasSpec");
    let gridAreaBuilders = new (T.IdentityMapOfString$_GridAreaBuilder()).new();
    let columnCount = null;
    let rowSpecs = convert.LineSplitter.split(namedAreasSpec)[$map](core.String, dart.fn(line => {
      if (line == null) dart.nullFailed(I[0], 119, 13, "line");
      return line[$trim]();
    }, T.StringToString()))[$where](dart.fn(line => {
      if (line == null) dart.nullFailed(I[0], 120, 15, "line");
      return line[$isNotEmpty];
    }, T.StringTobool()))[$toList]();
    for (let currentRow = 0; currentRow < dart.notNull(rowSpecs[$length]); currentRow = currentRow + 1) {
      let rowSpec = rowSpecs[$_get](currentRow);
      let cellSpecs = rowSpec[$split](placement._tokenSeparatorPattern);
      if (columnCount == null) {
        columnCount = cellSpecs[$length];
      } else if (columnCount != cellSpecs[$length]) {
        dart.throw(new core.ArgumentError.new("Row (" + dart.str(currentRow) + ") has the wrong number of area names, " + "expected=" + dart.str(columnCount) + " found=" + dart.str(cellSpecs[$length])));
      }
      for (let currentColumn = 0; currentColumn < dart.notNull(cellSpecs[$length]); currentColumn = currentColumn + 1) {
        let token = cellSpecs[$_get](currentColumn);
        if (dart.test(placement._isNamedCellToken(token))) {
          let builder = gridAreaBuilders[$putIfAbsent](token, dart.fn(() => new placement._GridAreaBuilder.new(token), T.VoidTo_GridAreaBuilder()));
          builder.addCell(currentColumn, currentRow);
        } else if (!dart.test(placement._isNullCellToken(token))) {
          dart.throw(new core.ArgumentError.new("Invalid area name, name=" + dart.str(token) + "\n" + "Must be in /^[a-zA-Z][\\w\\d-_]*$/"));
        }
      }
    }
    return new placement.NamedGridAreas.new({columnCount: dart.nullCheck(columnCount), rowCount: rowSpecs[$length], areas: gridAreaBuilders[$map](core.String, placement.GridArea, dart.fn((name, builder) => {
        if (name == null) dart.nullFailed(I[0], 154, 8, "name");
        if (builder == null) dart.nullFailed(I[0], 154, 14, "builder");
        return new (T.MapEntryOfString$GridArea()).__(name, builder.build());
      }, T.StringAnd_GridAreaBuilderToMapEntryOfString$GridArea()))});
  };
  placement._isNullCellToken = function _isNullCellToken(token) {
    if (token == null) dart.nullFailed(I[0], 162, 30, "token");
    return placement._nullCellPattern.hasMatch(token);
  };
  placement._isNamedCellToken = function _isNamedCellToken(token) {
    if (token == null) dart.nullFailed(I[0], 165, 31, "token");
    return placement._namedCellPattern.hasMatch(token);
  };
  dart.defineLazy(placement, {
    /*placement._tokenSeparatorPattern*/get _tokenSeparatorPattern() {
      return core.RegExp.new("\\s+");
    },
    /*placement._nullCellPattern*/get _nullCellPattern() {
      return core.RegExp.new("^\\.$");
    },
    /*placement._namedCellPattern*/get _namedCellPattern() {
      return core.RegExp.new("^[^\\.\\s]+$");
    }
  }, false);
  dart.trackLibraries("packages/flutter_layout_grid/src/foundation/placement.dart", {
    "package:flutter_layout_grid/src/foundation/placement.dart": placement
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["placement.dart"],"names":[],"mappings":"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","file":"../../../../../../../../../../C:/packages/flutter_layout_grid/src/foundation/placement.dart.lib.js"}');
  // Exports:
  return {
    src__foundation__placement: placement
  };
}));

//# sourceMappingURL=placement.dart.lib.js.map
