define(['dart_sdk', 'packages/collection/src/algorithms.dart', 'packages/collection/src/utils.dart', 'packages/collection/src/equality.dart'], (function load__packages__collection__src__list_extensions_dart(dart_sdk, packages__collection__src__algorithms$46dart, packages__collection__src__utils$46dart, packages__collection__src__equality$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const collection = dart_sdk.collection;
  const math = dart_sdk.math;
  const _js_helper = dart_sdk._js_helper;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const algorithms = packages__collection__src__algorithms$46dart.src__algorithms;
  const utils = packages__collection__src__utils$46dart.src__utils;
  const equality = packages__collection__src__equality$46dart.src__equality;
  var list_extensions = Object.create(dart.library);
  var $length = dartx.length;
  var $_get = dartx._get;
  var $_set = dartx._set;
  var $setRange = dartx.setRange;
  var $compareTo = dartx.compareTo;
  dart._checkModuleNullSafetyMode(false);
  var T$ = {
    ObjectN: () => (T$.ObjectN = dart.constFn(dart.nullable(core.Object)))(),
    ObjectNAndObjectNToint: () => (T$.ObjectNAndObjectNToint = dart.constFn(dart.fnType(core.int, [T$.ObjectN(), T$.ObjectN()])))(),
    TToT: () => (T$.TToT = dart.constFn(dart.gFnType(T => [T, [T]], T => [T$.ObjectN()])))(),
    intN: () => (T$.intN = dart.constFn(dart.nullable(core.int)))(),
    TAndTToint: () => (T$.TAndTToint = dart.constFn(dart.gFnType(T => [core.int, [T, T]], T => [core.Comparable$(T)])))(),
    RandomN: () => (T$.RandomN = dart.constFn(dart.nullable(math.Random)))(),
    intAndintAndRandomNTovoid: () => (T$.intAndintAndRandomNTovoid = dart.constFn(dart.fnType(dart.void, [core.int, core.int], [T$.RandomN()])))(),
    intAndintTovoid: () => (T$.intAndintTovoid = dart.constFn(dart.fnType(dart.void, [core.int, core.int])))(),
    DefaultEqualityOfNeverL: () => (T$.DefaultEqualityOfNeverL = dart.constFn(equality.DefaultEquality$(dart.legacy(dart.Never))))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.fn(utils.defaultCompare, T$.ObjectNAndObjectNToint());
    },
    get C1() {
      return C[1] = dart.fn(utils.identity, T$.TToT());
    },
    get C2() {
      return C[2] = dart.fn(utils.compareComparable, T$.TAndTToint());
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: T$.DefaultEqualityOfNeverL().prototype
      });
    }
  }, false);
  var C = Array(4).fill(void 0);
  var I = [
    "file:///D:/src/flutter/.pub-cache/hosted/pub.dartlang.org/collection-1.15.0/lib/src/list_extensions.dart",
    "package:collection/src/list_extensions.dart"
  ];
  var source$ = dart.privateName(list_extensions, "ListSlice.source");
  var start$ = dart.privateName(list_extensions, "ListSlice.start");
  var length$ = dart.privateName(list_extensions, "ListSlice.length");
  var _initialSize$ = dart.privateName(list_extensions, "_initialSize");
  const _is_ListSlice_default = Symbol('_is_ListSlice_default');
  list_extensions.ListSlice$ = dart.generic(E => {
    var IterableOfE = () => (IterableOfE = dart.constFn(core.Iterable$(E)))();
    var ListSliceOfE = () => (ListSliceOfE = dart.constFn(list_extensions.ListSlice$(E)))();
    class ListSlice extends collection.ListBase$(E) {
      get source() {
        return this[source$];
      }
      set source(value) {
        super.source = value;
      }
      get start() {
        return this[start$];
      }
      set start(value) {
        super.start = value;
      }
      get length() {
        return this[length$];
      }
      set length(value) {
        super.length = value;
      }
      get end() {
        return dart.notNull(this.start) + dart.notNull(this.length);
      }
      _get(index) {
        if (index == null) dart.nullFailed(I[0], 331, 21, "index");
        if (this.source[$length] != this[_initialSize$]) {
          dart.throw(new core.ConcurrentModificationError.new(this.source));
        }
        core.RangeError.checkValidIndex(index, this, null, this.length);
        return this.source[$_get](dart.notNull(this.start) + dart.notNull(index));
      }
      _set(index, value$) {
        let value = value$;
        if (index == null) dart.nullFailed(I[0], 340, 25, "index");
        E.as(value);
        if (this.source[$length] != this[_initialSize$]) {
          dart.throw(new core.ConcurrentModificationError.new(this.source));
        }
        core.RangeError.checkValidIndex(index, this, null, this.length);
        this.source[$_set](dart.notNull(this.start) + dart.notNull(index), value);
        return value$;
      }
      setRange(start, end, iterable, skipCount = 0) {
        if (start == null) dart.nullFailed(I[0], 349, 21, "start");
        if (end == null) dart.nullFailed(I[0], 349, 32, "end");
        IterableOfE().as(iterable);
        if (iterable == null) dart.nullFailed(I[0], 349, 49, "iterable");
        if (skipCount == null) dart.nullFailed(I[0], 349, 64, "skipCount");
        if (this.source[$length] != this[_initialSize$]) {
          dart.throw(new core.ConcurrentModificationError.new(this.source));
        }
        core.RangeError.checkValidRange(start, end, this.length);
        this.source[$setRange](dart.notNull(start) + dart.notNull(start), dart.notNull(start) + dart.notNull(end), iterable, skipCount);
      }
      slice(start, end = null) {
        if (start == null) dart.nullFailed(I[0], 369, 26, "start");
        end = core.RangeError.checkValidRange(start, end, this.length);
        return new (ListSliceOfE()).__(this[_initialSize$], this.source, dart.notNull(start) + dart.notNull(start), dart.notNull(end) - dart.notNull(start));
      }
      shuffle(random = null) {
        if (this.source[$length] != this[_initialSize$]) {
          dart.throw(new core.ConcurrentModificationError.new(this.source));
        }
        algorithms.shuffle(this.source, this.start, this.end, random);
      }
      sort(compare = null) {
        if (this.source[$length] != this[_initialSize$]) {
          dart.throw(new core.ConcurrentModificationError.new(this.source));
        }
        compare == null ? compare = C[0] || CT.C0 : null;
        algorithms.quickSort(E, this.source, compare, this.start, dart.notNull(this.start) + dart.notNull(this.length));
      }
      sortRange(start, end, compare) {
        if (start == null) dart.nullFailed(I[0], 392, 22, "start");
        if (end == null) dart.nullFailed(I[0], 392, 33, "end");
        if (compare == null) dart.nullFailed(I[0], 392, 61, "compare");
        if (this.source[$length] != this[_initialSize$]) {
          dart.throw(new core.ConcurrentModificationError.new(this.source));
        }
        list_extensions['ListExtensions|sortRange'](E, this.source, start, end, compare);
      }
      shuffleRange(start, end, random = null) {
        if (start == null) dart.nullFailed(I[0], 402, 25, "start");
        if (end == null) dart.nullFailed(I[0], 402, 36, "end");
        if (this.source[$length] != this[_initialSize$]) {
          dart.throw(new core.ConcurrentModificationError.new(this.source));
        }
        core.RangeError.checkValidRange(start, end, this.length);
        algorithms.shuffle(this.source, dart.notNull(this.start) + dart.notNull(start), dart.notNull(this.start) + dart.notNull(end), random);
      }
      reverseRange(start, end) {
        if (start == null) dart.nullFailed(I[0], 411, 25, "start");
        if (end == null) dart.nullFailed(I[0], 411, 36, "end");
        core.RangeError.checkValidRange(start, end, this.length);
        list_extensions['ListExtensions|reverseRange'](E, this.source, dart.notNull(this.start) + dart.notNull(start), dart.notNull(this.start) + dart.notNull(end));
      }
      set length(newLength) {
        if (newLength == null) dart.nullFailed(I[0], 419, 18, "newLength");
        dart.throw(new core.UnsupportedError.new("Cannot change the length of a fixed-length list"));
      }
      add(element) {
        E.as(element);
        dart.throw(new core.UnsupportedError.new("Cannot add to a fixed-length list"));
      }
      insert(index, element) {
        if (index == null) dart.nullFailed(I[0], 429, 19, "index");
        E.as(element);
        dart.throw(new core.UnsupportedError.new("Cannot add to a fixed-length list"));
      }
      insertAll(index, iterable) {
        if (index == null) dart.nullFailed(I[0], 434, 22, "index");
        IterableOfE().as(iterable);
        if (iterable == null) dart.nullFailed(I[0], 434, 41, "iterable");
        dart.throw(new core.UnsupportedError.new("Cannot add to a fixed-length list"));
      }
      addAll(iterable) {
        IterableOfE().as(iterable);
        if (iterable == null) dart.nullFailed(I[0], 439, 27, "iterable");
        dart.throw(new core.UnsupportedError.new("Cannot add to a fixed-length list"));
      }
      remove(element) {
        dart.throw(new core.UnsupportedError.new("Cannot remove from a fixed-length list"));
      }
      removeWhere(test) {
        if (test == null) dart.nullFailed(I[0], 449, 45, "test");
        dart.throw(new core.UnsupportedError.new("Cannot remove from a fixed-length list"));
      }
      retainWhere(test) {
        if (test == null) dart.nullFailed(I[0], 454, 45, "test");
        dart.throw(new core.UnsupportedError.new("Cannot remove from a fixed-length list"));
      }
      clear() {
        dart.throw(new core.UnsupportedError.new("Cannot clear a fixed-length list"));
      }
      removeAt(index) {
        if (index == null) dart.nullFailed(I[0], 464, 18, "index");
        dart.throw(new core.UnsupportedError.new("Cannot remove from a fixed-length list"));
      }
      removeLast() {
        dart.throw(new core.UnsupportedError.new("Cannot remove from a fixed-length list"));
      }
      removeRange(start, end) {
        if (start == null) dart.nullFailed(I[0], 474, 24, "start");
        if (end == null) dart.nullFailed(I[0], 474, 35, "end");
        dart.throw(new core.UnsupportedError.new("Cannot remove from a fixed-length list"));
      }
      replaceRange(start, end, newContents) {
        if (start == null) dart.nullFailed(I[0], 479, 25, "start");
        if (end == null) dart.nullFailed(I[0], 479, 36, "end");
        IterableOfE().as(newContents);
        if (newContents == null) dart.nullFailed(I[0], 479, 53, "newContents");
        dart.throw(new core.UnsupportedError.new("Cannot remove from a fixed-length list"));
      }
    }
    (ListSlice.new = function(source, start, end) {
      if (source == null) dart.nullFailed(I[0], 318, 18, "source");
      if (start == null) dart.nullFailed(I[0], 318, 31, "start");
      if (end == null) dart.nullFailed(I[0], 318, 42, "end");
      this[source$] = source;
      this[start$] = start;
      this[length$] = dart.notNull(end) - dart.notNull(start);
      this[_initialSize$] = source[$length];
      core.RangeError.checkValidRange(this.start, end, this.source[$length]);
    }).prototype = ListSlice.prototype;
    (ListSlice.__ = function(_initialSize, source, start, length) {
      if (_initialSize == null) dart.nullFailed(I[0], 325, 20, "_initialSize");
      if (source == null) dart.nullFailed(I[0], 325, 39, "source");
      if (start == null) dart.nullFailed(I[0], 325, 52, "start");
      if (length == null) dart.nullFailed(I[0], 325, 64, "length");
      this[_initialSize$] = _initialSize;
      this[source$] = source;
      this[start$] = start;
      this[length$] = length;
      ;
    }).prototype = ListSlice.prototype;
    dart.addTypeTests(ListSlice);
    ListSlice.prototype[_is_ListSlice_default] = true;
    dart.addTypeCaches(ListSlice);
    dart.setMethodSignature(ListSlice, () => ({
      __proto__: dart.getMethods(ListSlice.__proto__),
      _get: dart.fnType(E, [core.int]),
      [$_get]: dart.fnType(E, [core.int]),
      _set: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)]),
      [$_set]: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)]),
      slice: dart.fnType(list_extensions.ListSlice$(E), [core.int], [dart.nullable(core.int)]),
      sortRange: dart.fnType(dart.void, [core.int, core.int, dart.fnType(core.int, [E, E])]),
      shuffleRange: dart.fnType(dart.void, [core.int, core.int], [dart.nullable(math.Random)]),
      reverseRange: dart.fnType(dart.void, [core.int, core.int])
    }));
    dart.setGetterSignature(ListSlice, () => ({
      __proto__: dart.getGetters(ListSlice.__proto__),
      end: core.int
    }));
    dart.setSetterSignature(ListSlice, () => ({
      __proto__: dart.getSetters(ListSlice.__proto__),
      length: core.int,
      [$length]: core.int
    }));
    dart.setLibraryUri(ListSlice, I[1]);
    dart.setFieldSignature(ListSlice, () => ({
      __proto__: dart.getFields(ListSlice.__proto__),
      [_initialSize$]: dart.finalFieldType(core.int),
      source: dart.finalFieldType(core.List$(E)),
      start: dart.finalFieldType(core.int),
      length: dart.finalFieldType(core.int)
    }));
    dart.defineExtensionMethods(ListSlice, [
      '_get',
      '_set',
      'setRange',
      'shuffle',
      'sort',
      'add',
      'insert',
      'insertAll',
      'addAll',
      'remove',
      'removeWhere',
      'retainWhere',
      'clear',
      'removeAt',
      'removeLast',
      'removeRange',
      'replaceRange'
    ]);
    dart.defineExtensionAccessors(ListSlice, ['length']);
    return ListSlice;
  });
  list_extensions.ListSlice = list_extensions.ListSlice$();
  dart.addTypeTests(list_extensions.ListSlice, _is_ListSlice_default);
  list_extensions['ListExtensions|binarySearch'] = function ListExtensions$124binarySearch(E, $this, element, compare) {
    if ($this == null) dart.nullFailed(I[0], 23, 7, "#this");
    if (compare == null) dart.nullFailed(I[0], 23, 50, "compare");
    return algorithms.binarySearchBy(E, E, $this, dart.gbind(C[1] || CT.C1, E), compare, element);
  };
  list_extensions['ListExtensions|get#binarySearch'] = function ListExtensions$124get$35binarySearch(E, $this) {
    if ($this == null) dart.nullFailed(I[0], 23, 7, "#this");
    return dart.fn((element, compare) => {
      if (compare == null) dart.nullFailed(I[0], 23, 50, "compare");
      return list_extensions['ListExtensions|binarySearch'](E, $this, element, compare);
    }, dart.fnType(core.int, [E, dart.fnType(core.int, [E, E])]));
  };
  list_extensions['ListExtensions|binarySearchByCompare'] = function ListExtensions$124binarySearchByCompare(E, K, $this, element, keyOf, compare, start = 0, end = null) {
    if ($this == null) dart.nullFailed(I[0], 36, 7, "#this");
    if (keyOf == null) dart.nullFailed(I[0], 37, 44, "keyOf");
    if (compare == null) dart.nullFailed(I[0], 37, 70, "compare");
    if (start == null) dart.nullFailed(I[0], 38, 16, "start");
    return algorithms.binarySearchBy(E, K, $this, keyOf, compare, element, start, end);
  };
  list_extensions['ListExtensions|get#binarySearchByCompare'] = function ListExtensions$124get$35binarySearchByCompare(E, $this) {
    if ($this == null) dart.nullFailed(I[0], 36, 7, "#this");
    return dart.fn((K, element, keyOf, compare, start = 0, end = null) => {
      if (keyOf == null) dart.nullFailed(I[0], 37, 44, "keyOf");
      if (compare == null) dart.nullFailed(I[0], 37, 70, "compare");
      if (start == null) dart.nullFailed(I[0], 38, 16, "start");
      return list_extensions['ListExtensions|binarySearchByCompare'](E, K, $this, element, keyOf, compare, start, end);
    }, dart.gFnType(K => {
      var KAndKToint = () => (KAndKToint = dart.constFn(dart.fnType(core.int, [K, K])))();
      return [core.int, [E, dart.fnType(K, [E]), KAndKToint()], [core.int, T$.intN()]];
    }, K => {
      var KAndKToint = () => (KAndKToint = dart.constFn(dart.fnType(core.int, [K, K])))();
      return [T$.ObjectN()];
    }));
  };
  list_extensions['ListExtensions|binarySearchBy'] = function ListExtensions$124binarySearchBy(E, K, $this, element, keyOf, start = 0, end = null) {
    if ($this == null) dart.nullFailed(I[0], 52, 7, "#this");
    if (keyOf == null) dart.nullFailed(I[0], 53, 44, "keyOf");
    if (start == null) dart.nullFailed(I[0], 53, 56, "start");
    return algorithms.binarySearchBy(E, K, $this, keyOf, dart.fn((a, b) => {
      if (a == null) dart.nullFailed(I[0], 55, 25, "a");
      if (b == null) dart.nullFailed(I[0], 55, 28, "b");
      return a[$compareTo](b);
    }, dart.fnType(core.int, [K, K])), element, start, end);
  };
  list_extensions['ListExtensions|get#binarySearchBy'] = function ListExtensions$124get$35binarySearchBy(E, $this) {
    if ($this == null) dart.nullFailed(I[0], 52, 7, "#this");
    return dart.fn((K, element, keyOf, start = 0, end = null) => {
      if (keyOf == null) dart.nullFailed(I[0], 53, 44, "keyOf");
      if (start == null) dart.nullFailed(I[0], 53, 56, "start");
      return list_extensions['ListExtensions|binarySearchBy'](E, K, $this, element, keyOf, start, end);
    }, dart.gFnType(K => [core.int, [E, dart.fnType(K, [E])], [core.int, T$.intN()]], K => {
      var ComparableOfK = () => (ComparableOfK = dart.constFn(core.Comparable$(K)))();
      return [ComparableOfK()];
    }));
  };
  list_extensions['ListExtensions|lowerBound'] = function ListExtensions$124lowerBound(E, $this, element, compare) {
    if ($this == null) dart.nullFailed(I[0], 68, 7, "#this");
    if (compare == null) dart.nullFailed(I[0], 68, 48, "compare");
    return algorithms.lowerBoundBy(E, E, $this, dart.gbind(C[1] || CT.C1, E), compare, element);
  };
  list_extensions['ListExtensions|get#lowerBound'] = function ListExtensions$124get$35lowerBound(E, $this) {
    if ($this == null) dart.nullFailed(I[0], 68, 7, "#this");
    return dart.fn((element, compare) => {
      if (compare == null) dart.nullFailed(I[0], 68, 48, "compare");
      return list_extensions['ListExtensions|lowerBound'](E, $this, element, compare);
    }, dart.fnType(core.int, [E, dart.fnType(core.int, [E, E])]));
  };
  list_extensions['ListExtensions|lowerBoundByCompare'] = function ListExtensions$124lowerBoundByCompare(E, K, $this, element, keyOf, compare, start = 0, end = null) {
    if ($this == null) dart.nullFailed(I[0], 85, 7, "#this");
    if (keyOf == null) dart.nullFailed(I[0], 86, 36, "keyOf");
    if (compare == null) dart.nullFailed(I[0], 86, 62, "compare");
    if (start == null) dart.nullFailed(I[0], 87, 16, "start");
    return algorithms.lowerBoundBy(E, K, $this, keyOf, compare, element, start, end);
  };
  list_extensions['ListExtensions|get#lowerBoundByCompare'] = function ListExtensions$124get$35lowerBoundByCompare(E, $this) {
    if ($this == null) dart.nullFailed(I[0], 85, 7, "#this");
    return dart.fn((K, element, keyOf, compare, start = 0, end = null) => {
      if (keyOf == null) dart.nullFailed(I[0], 86, 36, "keyOf");
      if (compare == null) dart.nullFailed(I[0], 86, 62, "compare");
      if (start == null) dart.nullFailed(I[0], 87, 16, "start");
      return list_extensions['ListExtensions|lowerBoundByCompare'](E, K, $this, element, keyOf, compare, start, end);
    }, dart.gFnType(K => {
      var KAndKToint = () => (KAndKToint = dart.constFn(dart.fnType(core.int, [K, K])))();
      return [core.int, [E, dart.fnType(K, [E]), KAndKToint()], [core.int, T$.intN()]];
    }, K => {
      var KAndKToint = () => (KAndKToint = dart.constFn(dart.fnType(core.int, [K, K])))();
      return [T$.ObjectN()];
    }));
  };
  list_extensions['ListExtensions|lowerBoundBy'] = function ListExtensions$124lowerBoundBy(E, K, $this, element, keyOf, start = 0, end = null) {
    if ($this == null) dart.nullFailed(I[0], 105, 7, "#this");
    if (keyOf == null) dart.nullFailed(I[0], 105, 70, "keyOf");
    if (start == null) dart.nullFailed(I[0], 106, 16, "start");
    return algorithms.lowerBoundBy(E, K, $this, keyOf, dart.gbind(C[2] || CT.C2, K), element, start, end);
  };
  list_extensions['ListExtensions|get#lowerBoundBy'] = function ListExtensions$124get$35lowerBoundBy(E, $this) {
    if ($this == null) dart.nullFailed(I[0], 105, 7, "#this");
    return dart.fn((K, element, keyOf, start = 0, end = null) => {
      if (keyOf == null) dart.nullFailed(I[0], 105, 70, "keyOf");
      if (start == null) dart.nullFailed(I[0], 106, 16, "start");
      return list_extensions['ListExtensions|lowerBoundBy'](E, K, $this, element, keyOf, start, end);
    }, dart.gFnType(K => [core.int, [E, dart.fnType(K, [E])], [core.int, T$.intN()]], K => {
      var ComparableOfK = () => (ComparableOfK = dart.constFn(core.Comparable$(K)))();
      return [ComparableOfK()];
    }));
  };
  list_extensions['ListExtensions|forEachIndexed'] = function ListExtensions$124forEachIndexed(E, $this, action) {
    if ($this == null) dart.nullFailed(I[0], 114, 8, "#this");
    if (action == null) dart.nullFailed(I[0], 114, 59, "action");
    for (let index = 0; index < dart.notNull($this[$length]); index = index + 1) {
      action(index, $this[$_get](index));
    }
  };
  list_extensions['ListExtensions|get#forEachIndexed'] = function ListExtensions$124get$35forEachIndexed(E, $this) {
    if ($this == null) dart.nullFailed(I[0], 114, 8, "#this");
    return dart.fn(action => {
      if (action == null) dart.nullFailed(I[0], 114, 59, "action");
      return list_extensions['ListExtensions|forEachIndexed'](E, $this, action);
    }, dart.fnType(dart.void, [dart.fnType(dart.void, [core.int, E])]));
  };
  list_extensions['ListExtensions|get#forEachWhile'] = function ListExtensions$124get$35forEachWhile(E, $this) {
    if ($this == null) dart.nullFailed(I[0], 124, 8, "#this");
    return dart.fn(action => {
      if (action == null) dart.nullFailed(I[0], 124, 46, "action");
      return list_extensions['ListExtensions|forEachWhile'](E, $this, action);
    }, dart.fnType(dart.void, [dart.fnType(core.bool, [E])]));
  };
  list_extensions['ListExtensions|forEachWhile'] = function ListExtensions$124forEachWhile(E, $this, action) {
    if ($this == null) dart.nullFailed(I[0], 124, 8, "#this");
    if (action == null) dart.nullFailed(I[0], 124, 46, "action");
    for (let index = 0; index < dart.notNull($this[$length]); index = index + 1) {
      if (!dart.test(action($this[$_get](index)))) break;
    }
  };
  list_extensions['ListExtensions|forEachIndexedWhile'] = function ListExtensions$124forEachIndexedWhile(E, $this, action) {
    if ($this == null) dart.nullFailed(I[0], 135, 8, "#this");
    if (action == null) dart.nullFailed(I[0], 135, 64, "action");
    for (let index = 0; index < dart.notNull($this[$length]); index = index + 1) {
      if (!dart.test(action(index, $this[$_get](index)))) break;
    }
  };
  list_extensions['ListExtensions|get#forEachIndexedWhile'] = function ListExtensions$124get$35forEachIndexedWhile(E, $this) {
    if ($this == null) dart.nullFailed(I[0], 135, 8, "#this");
    return dart.fn(action => {
      if (action == null) dart.nullFailed(I[0], 135, 64, "action");
      return list_extensions['ListExtensions|forEachIndexedWhile'](E, $this, action);
    }, dart.fnType(dart.void, [dart.fnType(core.bool, [core.int, E])]));
  };
  list_extensions['ListExtensions|mapIndexed'] = function ListExtensions$124mapIndexed(E, R, $this, convert) {
    if ($this == null) dart.nullFailed(I[0], 142, 15, "#this");
    if (convert == null) dart.nullFailed(I[0], 142, 62, "convert");
    return new (_js_helper.SyncIterable$(R)).new(function* ListExtensions$124mapIndexed() {
      for (let index = 0; index < dart.notNull($this[$length]); index = index + 1) {
        yield convert(index, $this[$_get](index));
      }
    });
  };
  list_extensions['ListExtensions|get#mapIndexed'] = function ListExtensions$124get$35mapIndexed(E, $this) {
    if ($this == null) dart.nullFailed(I[0], 142, 15, "#this");
    return dart.fn((R, convert) => {
      if (convert == null) dart.nullFailed(I[0], 142, 62, "convert");
      return list_extensions['ListExtensions|mapIndexed'](E, R, $this, convert);
    }, dart.gFnType(R => {
      var IterableOfR = () => (IterableOfR = dart.constFn(core.Iterable$(R)))();
      return [IterableOfR(), [dart.fnType(R, [core.int, E])]];
    }, R => {
      var IterableOfR = () => (IterableOfR = dart.constFn(core.Iterable$(R)))();
      return [T$.ObjectN()];
    }));
  };
  list_extensions['ListExtensions|whereIndexed'] = function ListExtensions$124whereIndexed(E, $this, test) {
    if ($this == null) dart.nullFailed(I[0], 149, 15, "#this");
    if (test == null) dart.nullFailed(I[0], 149, 64, "test");
    return new (_js_helper.SyncIterable$(E)).new(function* ListExtensions$124whereIndexed() {
      for (let index = 0; index < dart.notNull($this[$length]); index = index + 1) {
        let element = $this[$_get](index);
        if (dart.test(test(index, element))) yield element;
      }
    });
  };
  list_extensions['ListExtensions|get#whereIndexed'] = function ListExtensions$124get$35whereIndexed(E, $this) {
    if ($this == null) dart.nullFailed(I[0], 149, 15, "#this");
    return dart.fn(test => {
      if (test == null) dart.nullFailed(I[0], 149, 64, "test");
      return list_extensions['ListExtensions|whereIndexed'](E, $this, test);
    }, dart.fnType(core.Iterable$(E), [dart.fnType(core.bool, [core.int, E])]));
  };
  list_extensions['ListExtensions|whereNotIndexed'] = function ListExtensions$124whereNotIndexed(E, $this, test) {
    if ($this == null) dart.nullFailed(I[0], 157, 15, "#this");
    if (test == null) dart.nullFailed(I[0], 157, 67, "test");
    return new (_js_helper.SyncIterable$(E)).new(function* ListExtensions$124whereNotIndexed() {
      for (let index = 0; index < dart.notNull($this[$length]); index = index + 1) {
        let element = $this[$_get](index);
        if (!dart.test(test(index, element))) yield element;
      }
    });
  };
  list_extensions['ListExtensions|get#whereNotIndexed'] = function ListExtensions$124get$35whereNotIndexed(E, $this) {
    if ($this == null) dart.nullFailed(I[0], 157, 15, "#this");
    return dart.fn(test => {
      if (test == null) dart.nullFailed(I[0], 157, 67, "test");
      return list_extensions['ListExtensions|whereNotIndexed'](E, $this, test);
    }, dart.fnType(core.Iterable$(E), [dart.fnType(core.bool, [core.int, E])]));
  };
  list_extensions['ListExtensions|expandIndexed'] = function ListExtensions$124expandIndexed(E, R, $this, expand) {
    if ($this == null) dart.nullFailed(I[0], 168, 15, "#this");
    if (expand == null) dart.nullFailed(I[0], 169, 50, "expand");
    return new (_js_helper.SyncIterable$(R)).new(function* ListExtensions$124expandIndexed() {
      for (let index = 0; index < dart.notNull($this[$length]); index = index + 1) {
        yield* expand(index, $this[$_get](index));
      }
    });
  };
  list_extensions['ListExtensions|get#expandIndexed'] = function ListExtensions$124get$35expandIndexed(E, $this) {
    if ($this == null) dart.nullFailed(I[0], 168, 15, "#this");
    return dart.fn((R, expand) => {
      if (expand == null) dart.nullFailed(I[0], 169, 50, "expand");
      return list_extensions['ListExtensions|expandIndexed'](E, R, $this, expand);
    }, dart.gFnType(R => {
      var IterableOfR = () => (IterableOfR = dart.constFn(core.Iterable$(R)))();
      return [IterableOfR(), [dart.fnType(IterableOfR(), [core.int, E])]];
    }, R => {
      var IterableOfR = () => (IterableOfR = dart.constFn(core.Iterable$(R)))();
      return [T$.ObjectN()];
    }));
  };
  list_extensions['ListExtensions|sortRange'] = function ListExtensions$124sortRange(E, $this, start, end, compare) {
    if ($this == null) dart.nullFailed(I[0], 176, 8, "#this");
    if (start == null) dart.nullFailed(I[0], 176, 22, "start");
    if (end == null) dart.nullFailed(I[0], 176, 33, "end");
    if (compare == null) dart.nullFailed(I[0], 176, 61, "compare");
    algorithms.quickSortBy(E, E, $this, dart.gbind(C[1] || CT.C1, E), compare, start, end);
  };
  list_extensions['ListExtensions|get#sortRange'] = function ListExtensions$124get$35sortRange(E, $this) {
    if ($this == null) dart.nullFailed(I[0], 176, 8, "#this");
    return dart.fn((start, end, compare) => {
      if (start == null) dart.nullFailed(I[0], 176, 22, "start");
      if (end == null) dart.nullFailed(I[0], 176, 33, "end");
      if (compare == null) dart.nullFailed(I[0], 176, 61, "compare");
      return list_extensions['ListExtensions|sortRange'](E, $this, start, end, compare);
    }, dart.fnType(dart.void, [core.int, core.int, dart.fnType(core.int, [E, E])]));
  };
  list_extensions['ListExtensions|sortByCompare'] = function ListExtensions$124sortByCompare(E, K, $this, keyOf, compare, start = 0, end = null) {
    if ($this == null) dart.nullFailed(I[0], 183, 8, "#this");
    if (keyOf == null) dart.nullFailed(I[0], 184, 29, "keyOf");
    if (compare == null) dart.nullFailed(I[0], 184, 59, "compare");
    if (start == null) dart.nullFailed(I[0], 185, 12, "start");
    algorithms.quickSortBy(E, K, $this, keyOf, compare, start, end);
  };
  list_extensions['ListExtensions|get#sortByCompare'] = function ListExtensions$124get$35sortByCompare(E, $this) {
    if ($this == null) dart.nullFailed(I[0], 183, 8, "#this");
    return dart.fn((K, keyOf, compare, start = 0, end = null) => {
      if (keyOf == null) dart.nullFailed(I[0], 184, 29, "keyOf");
      if (compare == null) dart.nullFailed(I[0], 184, 59, "compare");
      if (start == null) dart.nullFailed(I[0], 185, 12, "start");
      return list_extensions['ListExtensions|sortByCompare'](E, K, $this, keyOf, compare, start, end);
    }, dart.gFnType(K => {
      var KAndKToint = () => (KAndKToint = dart.constFn(dart.fnType(core.int, [K, K])))();
      return [dart.void, [dart.fnType(K, [E]), KAndKToint()], [core.int, T$.intN()]];
    }, K => {
      var KAndKToint = () => (KAndKToint = dart.constFn(dart.fnType(core.int, [K, K])))();
      return [T$.ObjectN()];
    }));
  };
  list_extensions['ListExtensions|sortBy'] = function ListExtensions$124sortBy(E, K, $this, keyOf, start = 0, end = null) {
    if ($this == null) dart.nullFailed(I[0], 192, 8, "#this");
    if (keyOf == null) dart.nullFailed(I[0], 192, 62, "keyOf");
    if (start == null) dart.nullFailed(I[0], 193, 12, "start");
    algorithms.quickSortBy(E, K, $this, keyOf, dart.gbind(C[2] || CT.C2, K), start, end);
  };
  list_extensions['ListExtensions|get#sortBy'] = function ListExtensions$124get$35sortBy(E, $this) {
    if ($this == null) dart.nullFailed(I[0], 192, 8, "#this");
    return dart.fn((K, keyOf, start = 0, end = null) => {
      if (keyOf == null) dart.nullFailed(I[0], 192, 62, "keyOf");
      if (start == null) dart.nullFailed(I[0], 193, 12, "start");
      return list_extensions['ListExtensions|sortBy'](E, K, $this, keyOf, start, end);
    }, dart.gFnType(K => [dart.void, [dart.fnType(K, [E])], [core.int, T$.intN()]], K => {
      var ComparableOfK = () => (ComparableOfK = dart.constFn(core.Comparable$(K)))();
      return [ComparableOfK()];
    }));
  };
  list_extensions['ListExtensions|shuffleRange'] = function ListExtensions$124shuffleRange(E, $this, start, end, random = null) {
    if ($this == null) dart.nullFailed(I[0], 198, 8, "#this");
    if (start == null) dart.nullFailed(I[0], 198, 25, "start");
    if (end == null) dart.nullFailed(I[0], 198, 36, "end");
    core.RangeError.checkValidRange(start, end, $this[$length]);
    algorithms.shuffle($this, start, end, random);
  };
  list_extensions['ListExtensions|get#shuffleRange'] = function ListExtensions$124get$35shuffleRange(E, $this) {
    if ($this == null) dart.nullFailed(I[0], 198, 8, "#this");
    return dart.fn((start, end, random = null) => {
      if (start == null) dart.nullFailed(I[0], 198, 25, "start");
      if (end == null) dart.nullFailed(I[0], 198, 36, "end");
      return list_extensions['ListExtensions|shuffleRange'](E, $this, start, end, random);
    }, T$.intAndintAndRandomNTovoid());
  };
  list_extensions['ListExtensions|reverseRange'] = function ListExtensions$124reverseRange(E, $this, start, end) {
    if ($this == null) dart.nullFailed(I[0], 204, 8, "#this");
    if (start == null) dart.nullFailed(I[0], 204, 25, "start");
    if (end == null) dart.nullFailed(I[0], 204, 36, "end");
    core.RangeError.checkValidRange(start, end, $this[$length]);
    while (dart.notNull(start) < (end = dart.notNull(end) - 1)) {
      let tmp = $this[$_get](start);
      $this[$_set](start, $this[$_get](end));
      $this[$_set](end, tmp);
      start = dart.notNull(start) + 1;
    }
  };
  list_extensions['ListExtensions|get#reverseRange'] = function ListExtensions$124get$35reverseRange(E, $this) {
    if ($this == null) dart.nullFailed(I[0], 204, 8, "#this");
    return dart.fn((start, end) => {
      if (start == null) dart.nullFailed(I[0], 204, 25, "start");
      if (end == null) dart.nullFailed(I[0], 204, 36, "end");
      return list_extensions['ListExtensions|reverseRange'](E, $this, start, end);
    }, T$.intAndintTovoid());
  };
  list_extensions['ListExtensions|swap'] = function ListExtensions$124swap(E, $this, index1, index2) {
    if ($this == null) dart.nullFailed(I[0], 215, 8, "#this");
    if (index1 == null) dart.nullFailed(I[0], 215, 17, "index1");
    if (index2 == null) dart.nullFailed(I[0], 215, 29, "index2");
    core.RangeError.checkValidIndex(index1, $this, "index1");
    core.RangeError.checkValidIndex(index2, $this, "index2");
    let tmp = $this[$_get](index1);
    $this[$_set](index1, $this[$_get](index2));
    $this[$_set](index2, tmp);
  };
  list_extensions['ListExtensions|get#swap'] = function ListExtensions$124get$35swap(E, $this) {
    if ($this == null) dart.nullFailed(I[0], 215, 8, "#this");
    return dart.fn((index1, index2) => {
      if (index1 == null) dart.nullFailed(I[0], 215, 17, "index1");
      if (index2 == null) dart.nullFailed(I[0], 215, 29, "index2");
      return list_extensions['ListExtensions|swap'](E, $this, index1, index2);
    }, T$.intAndintTovoid());
  };
  list_extensions['ListExtensions|slice'] = function ListExtensions$124slice(E, $this, start, end = null) {
    if ($this == null) dart.nullFailed(I[0], 235, 16, "#this");
    if (start == null) dart.nullFailed(I[0], 235, 26, "start");
    end = core.RangeError.checkValidRange(start, end, $this[$length]);
    let self = $this;
    if (list_extensions.ListSlice.is(self)) return list_extensions['ListExtensions|slice'](E, self, start, end);
    return new (list_extensions.ListSlice$(E)).new($this, start, end);
  };
  list_extensions['ListExtensions|get#slice'] = function ListExtensions$124get$35slice(E, $this) {
    if ($this == null) dart.nullFailed(I[0], 235, 16, "#this");
    return dart.fn((start, end = null) => {
      if (start == null) dart.nullFailed(I[0], 235, 26, "start");
      return list_extensions['ListExtensions|slice'](E, $this, start, end);
    }, dart.fnType(list_extensions.ListSlice$(E), [core.int], [T$.intN()]));
  };
  list_extensions['ListExtensions|equals'] = function ListExtensions$124equals(E, $this, other, equality = C[3] || CT.C3) {
    if ($this == null) dart.nullFailed(I[0], 248, 8, "#this");
    if (other == null) dart.nullFailed(I[0], 248, 23, "other");
    if (equality == null) dart.nullFailed(I[0], 248, 43, "equality");
    if ($this[$length] != other[$length]) return false;
    for (let i = 0; i < dart.notNull($this[$length]); i = i + 1) {
      if (!dart.test(equality.equals($this[$_get](i), other[$_get](i)))) return false;
    }
    return true;
  };
  list_extensions['ListExtensions|get#equals'] = function ListExtensions$124get$35equals(E, $this) {
    if ($this == null) dart.nullFailed(I[0], 248, 8, "#this");
    return dart.fn((other, equality = C[3] || CT.C3) => {
      if (other == null) dart.nullFailed(I[0], 248, 23, "other");
      if (equality == null) dart.nullFailed(I[0], 248, 43, "equality");
      return list_extensions['ListExtensions|equals'](E, $this, other, equality);
    }, dart.fnType(core.bool, [core.List$(E)], [equality.Equality$(E)]));
  };
  list_extensions['ListComparableExtensions|binarySearch'] = function ListComparableExtensions$124binarySearch(E, $this, element, compare = null) {
    let t43;
    if ($this == null) dart.nullFailed(I[0], 267, 7, "#this");
    if (element == null) dart.nullFailed(I[0], 267, 22, "element");
    return algorithms.binarySearchBy(E, E, $this, dart.gbind(C[1] || CT.C1, E), (t43 = compare, t43 == null ? dart.gbind(C[2] || CT.C2, E) : t43), element);
  };
  list_extensions['ListComparableExtensions|get#binarySearch'] = function ListComparableExtensions$124get$35binarySearch(E, $this) {
    if ($this == null) dart.nullFailed(I[0], 267, 7, "#this");
    return dart.fn((element, compare = null) => {
      if (element == null) dart.nullFailed(I[0], 267, 22, "element");
      return list_extensions['ListComparableExtensions|binarySearch'](E, $this, element, compare);
    }, dart.fnType(core.int, [E], [dart.nullable(dart.fnType(core.int, [E, E]))]));
  };
  list_extensions['ListComparableExtensions|lowerBound'] = function ListComparableExtensions$124lowerBound(E, $this, element, compare = null) {
    let t45;
    if ($this == null) dart.nullFailed(I[0], 281, 7, "#this");
    if (element == null) dart.nullFailed(I[0], 281, 20, "element");
    return algorithms.lowerBoundBy(E, E, $this, dart.gbind(C[1] || CT.C1, E), (t45 = compare, t45 == null ? dart.gbind(C[2] || CT.C2, E) : t45), element);
  };
  list_extensions['ListComparableExtensions|get#lowerBound'] = function ListComparableExtensions$124get$35lowerBound(E, $this) {
    if ($this == null) dart.nullFailed(I[0], 281, 7, "#this");
    return dart.fn((element, compare = null) => {
      if (element == null) dart.nullFailed(I[0], 281, 20, "element");
      return list_extensions['ListComparableExtensions|lowerBound'](E, $this, element, compare);
    }, dart.fnType(core.int, [E], [dart.nullable(dart.fnType(core.int, [E, E]))]));
  };
  list_extensions['ListComparableExtensions|sortRange'] = function ListComparableExtensions$124sortRange(E, $this, start, end, compare = null) {
    let t47;
    if ($this == null) dart.nullFailed(I[0], 289, 8, "#this");
    if (start == null) dart.nullFailed(I[0], 289, 22, "start");
    if (end == null) dart.nullFailed(I[0], 289, 33, "end");
    core.RangeError.checkValidRange(start, end, $this[$length]);
    algorithms.quickSortBy(E, E, $this, dart.gbind(C[1] || CT.C1, E), (t47 = compare, t47 == null ? dart.gbind(C[2] || CT.C2, E) : t47), start, end);
  };
  list_extensions['ListComparableExtensions|get#sortRange'] = function ListComparableExtensions$124get$35sortRange(E, $this) {
    if ($this == null) dart.nullFailed(I[0], 289, 8, "#this");
    return dart.fn((start, end, compare = null) => {
      if (start == null) dart.nullFailed(I[0], 289, 22, "start");
      if (end == null) dart.nullFailed(I[0], 289, 33, "end");
      return list_extensions['ListComparableExtensions|sortRange'](E, $this, start, end, compare);
    }, dart.fnType(dart.void, [core.int, core.int], [dart.nullable(dart.fnType(core.int, [E, E]))]));
  };
  dart.trackLibraries("packages/collection/src/list_extensions.dart", {
    "package:collection/src/list_extensions.dart": list_extensions
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["list_extensions.dart"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAoTgB;;;;;;MAGJ;;;;;;MAGA;;;;;;;AAaK,cAAM,cAAN,2BAAQ;MAAM;;YAGX;AAChB,YAAI,AAAO,wBAAU;AACsB,UAAzC,WAAM,yCAA4B;;AAEiB,QAA1C,gCAAgB,KAAK,EAAE,MAAM,MAAM;AAC9C,cAAO,AAAM,oBAAO,aAAN,2BAAQ,KAAK;MAC7B;WAGsB;YAAS;YAAT;aAAS;AAC7B,YAAI,AAAO,wBAAU;AACsB,UAAzC,WAAM,yCAA4B;;AAEiB,QAA1C,gCAAgB,KAAK,EAAE,MAAM,MAAM;AACjB,QAA7B,AAAM,mBAAO,aAAN,2BAAQ,KAAK,GAAI,KAAK;;MAC/B;eAGkB,OAAW,KAAiB,UAAe;YAA3C;YAAW;yBAAiB;;YAAe;AAC3D,YAAI,AAAO,wBAAU;AACsB,UAAzC,WAAM,yCAA4B;;AAEU,QAAnC,gCAAgB,KAAK,EAAE,GAAG,EAAE;AACyB,QAAhE,AAAO,uBAAe,aAAN,KAAK,iBAAG,KAAK,GAAQ,aAAN,KAAK,iBAAG,GAAG,GAAE,QAAQ,EAAE,SAAS;MACjE;YAcuB,OAAa;YAAb;AAC+B,QAApD,MAAiB,gCAAgB,KAAK,EAAE,GAAG,EAAE;AAC7C,cAAiB,yBAAE,qBAAc,aAAc,aAAN,KAAK,iBAAG,KAAK,GAAM,aAAJ,GAAG,iBAAG,KAAK;MACrE;cAGsB;AACpB,YAAI,AAAO,wBAAU;AACsB,UAAzC,WAAM,yCAA4B;;AAEU,QAA9C,mBAAmB,aAAQ,YAAO,UAAK,MAAM;MAC/C;WAGmC;AACjC,YAAI,AAAO,wBAAU;AACsB,UAAzC,WAAM,yCAA4B;;AAEV,QAA1B,AAAQ,OAAD,WAAP,0BAAQ;AACyC,QAAjD,wBAAU,aAAQ,OAAO,EAAE,YAAa,aAAN,2BAAQ;MAC5C;gBAGmB,OAAW,KAA4B;YAAvC;YAAW;YAA4B;AACxD,YAAI,AAAO,wBAAU;AACsB,UAAzC,WAAM,yCAA4B;;AAEC,QAA9B,+CAAP,aAAiB,KAAK,EAAE,GAAG,EAAE,OAAO;MACtC;mBAKsB,OAAW,KAAc;YAAzB;YAAW;AAC/B,YAAI,AAAO,wBAAU;AACsB,UAAzC,WAAM,yCAA4B;;AAEU,QAAnC,gCAAgB,KAAK,EAAE,GAAG,EAAE;AACiC,QAAxE,mBAAmB,aAAmB,aAAN,2BAAQ,KAAK,GAAa,aAAN,2BAAQ,GAAG,GAAE,MAAM;MACzE;mBAGsB,OAAW;YAAX;YAAW;AACe,QAAnC,gCAAgB,KAAK,EAAE,GAAG,EAAE;AACkB,QAAlD,kDAAP,aAA+B,aAAN,2BAAQ,KAAK,GAAa,aAAN,2BAAQ,GAAG;MAC1D;;YAKe;AAC4D,QAAzE,WAAM,8BAAiB;MACzB;;aAGW;AACkD,QAA3D,WAAM,8BAAiB;MACzB;aAGgB,OAAS;YAAT;aAAS;AACoC,QAA3D,WAAM,8BAAiB;MACzB;gBAGmB,OAAmB;YAAnB;yBAAmB;;AACuB,QAA3D,WAAM,8BAAiB;MACzB;;yBAGwB;;AACqC,QAA3D,WAAM,8BAAiB;MACzB;aAGoB;AAC8C,QAAhE,WAAM,8BAAiB;MACzB;;YAG0C;AACwB,QAAhE,WAAM,8BAAiB;MACzB;;YAG0C;AACwB,QAAhE,WAAM,8BAAiB;MACzB;;AAI4D,QAA1D,WAAM,8BAAiB;MACzB;;YAGe;AACmD,QAAhE,WAAM,8BAAiB;MACzB;;AAIkE,QAAhE,WAAM,8BAAiB;MACzB;kBAGqB,OAAW;YAAX;YAAW;AACkC,QAAhE,WAAM,8BAAiB;MACzB;mBAGsB,OAAW,KAAiB;YAA5B;YAAW;yBAAiB;;AACgB,QAAhE,WAAM,8BAAiB;MACzB;;8BAnKe,QAAa,OAAW;UAAxB;UAAa;UAAW;MAAxB;MAAa;MACf,gBAAM,aAAJ,GAAG,iBAAG,KAAK;MACP,sBAAE,AAAO,MAAD;AAC4B,MAA1C,gCAAgB,YAAO,GAAG,EAAE,AAAO;IAChD;6BAGiB,cAAmB,QAAa,OAAY;UAA5C;UAAmB;UAAa;UAAY;MAA5C;MAAmB;MAAa;MAAY;;IAAO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;qGA9SjD,SAA4B;;;AAC3C,kDAAsC,8BAAU,OAAO,EAAE,OAAO;EAAC;;;AADjE,oBAAe;UAA4B;AAA3C,6EAAO,EAAP,OAAO;;EAC0D;0HAa3D,SAA+B,OAA0B,SACtD,WAAgB;;QADY;QAA0B;QACtD;AACT,kDACU,KAAK,EAAE,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,GAAG;EAAC;;;AAJ9C,uBACM,SAA+B,OAA0B,SACtD,WAAgB;UADY;UAA0B;UACtD;AAFT,yFAAO,EAAP,KAAK,EAAL,OAAO,EAAP,KAAK,EAAL,GAAG;;;;;;;;EAI2C;4GAaxC,SAA+B,OAAY,WAAgB;;QAA5B;QAAY;AACjD,kDACU,KAAK,EAAE,SAAC,GAAG;UAAH;UAAG;AAAM,YAAA,AAAE,EAAD,aAAW,CAAC;uCAAG,OAAO,EAAE,KAAK,EAAE,GAAG;EAAC;;;AAH/D,uBACM,SAA+B,OAAY,WAAgB;UAA5B;UAAY;AADjD,kFAAO,EAAP,KAAK,EAAL,KAAK,EAAL,GAAG;;;;;EAG4D;iGAalD,SAA4B;;;AACzC,gDAAoC,8BAAU,OAAO,EAAE,OAAO;EAAC;;;AAD/D,oBAAa;UAA4B;AAAzC,2EAAO,EAAP,OAAO;;EACwD;sHAiBzD,SAAuB,OAA0B,SAC9C,WAAgB;;QADI;QAA0B;QAC9C;AACT,gDAA8B,KAAK,EAAE,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,GAAG;EAAC;;;AAHlE,uBACM,SAAuB,OAA0B,SAC9C,WAAgB;UADI;UAA0B;UAC9C;AAFT,uFAAO,EAAP,KAAK,EAAL,OAAO,EAAP,KAAK,EAAL,GAAG;;;;;;;;EAG+D;wGAiB1B,SAAuB,OACtD,WAAgB;;QADsC;QACtD;AACT,gDACU,KAAK,EAAE,8BAAmB,OAAO,EAAE,KAAK,EAAE,GAAG;EAAC;;;AAHxD,uBAAwC,SAAuB,OACtD,WAAgB;UADsC;UACtD;AADT,gFAAO,EAAP,KAAK,EAAL,KAAK,EAAL,GAAG;;;;;EAGqD;yGAMJ;;;AACtD,aAAS,QAAQ,GAAG,AAAM,KAAD,gBAAG,iBAAQ,QAAA,AAAK,KAAA;AACb,MAA1B,AAAM,MAAA,CAAC,KAAK,EAAM,aAAC,KAAK;;EAE5B;;;AAJK;UAAmD;AAAnD,8EAAM;;EAIX;;;AAMK;UAAsC;AAAtC,4EAAM;;EAIX;qGAJ2C;;;AACzC,aAAS,QAAQ,GAAG,AAAM,KAAD,gBAAG,iBAAQ,QAAA,AAAK,KAAA;AACvC,qBAAK,AAAM,MAAA,CAAK,aAAC,KAAK,KAAI;;EAE9B;mHAO6D;;;AAC3D,aAAS,QAAQ,GAAG,AAAM,KAAD,gBAAG,iBAAQ,QAAA,AAAK,KAAA;AACvC,qBAAK,AAAM,MAAA,CAAC,KAAK,EAAM,aAAC,KAAK,KAAI;;EAErC;;;AAJK;UAAwD;AAAxD,mFAAM;;EAIX;oGAG2D;;;AAAlC;AACvB,eAAS,QAAQ,GAAG,AAAM,KAAD,gBAAG,iBAAQ,QAAA,AAAK,KAAA;AACvC,cAAM,AAAO,OAAA,CAAC,KAAK,EAAM,aAAC,KAAK;;IAEnC;;;;AAJY;UAA+C;AAA/C,8EAAO;;;;;;;;EAInB;qGAG6D;;;AAArC;AACtB,eAAS,QAAQ,GAAG,AAAM,KAAD,gBAAG,iBAAQ,QAAA,AAAK,KAAA;AACnC,sBAAc,aAAC,KAAK;AACxB,sBAAI,AAAI,IAAA,CAAC,KAAK,EAAE,OAAO,IAAG,MAAM,OAAO;;IAE3C;;;;AALY;UAAiD;AAAjD,0EAAI;;EAKhB;2GAGgE;;;AAArC;AACzB,eAAS,QAAQ,GAAG,AAAM,KAAD,gBAAG,iBAAQ,QAAA,AAAK,KAAA;AACnC,sBAAc,aAAC,KAAK;AACxB,uBAAK,AAAI,IAAA,CAAC,KAAK,EAAE,OAAO,IAAG,MAAM,OAAO;;IAE5C;;;;AALY;UAAoD;AAApD,6EAAI;;EAKhB;0GAO+C;;;AADnB;AAE1B,eAAS,QAAQ,GAAG,AAAM,KAAD,gBAAG,iBAAQ,QAAA,AAAK,KAAA;AACvC,eAAO,AAAM,MAAA,CAAC,KAAK,EAAM,aAAC,KAAK;;IAEnC;;;;AALY;UACmC;AADnC,gFAAM;;;;;;;;EAKlB;+FAGmB,OAAW,KAA4B;;QAAvC;QAAW;QAA4B;AACF,IAAtD,oCAAwB,8BAAU,OAAO,EAAE,KAAK,EAAE,GAAG;EACvD;;;AAFK,oBAAc,OAAW,KAA4B;UAAvC;UAAW;UAA4B;AAArD,wEAAK,EAAL,GAAG,EAAH,OAAO;;EAEZ;0GAM0B,OAA8B,SAC/C,WAAgB;;QADC;QAA8B;QAC/C;AACsC,IAA7C,oCAAkB,KAAK,EAAE,OAAO,EAAE,KAAK,EAAE,GAAG;EAC9C;;;AAJK,uBACqB,OAA8B,SAC/C,WAAgB;UADC;UAA8B;UAC/C;AAFJ,+EAAK,EAAL,OAAO,EAAP,KAAK,EAAL,GAAG;;;;;;;;EAIR;4FAK2D,OAClD,WAAgB;;QADkC;QAClD;AACsD,IAA7D,oCAAwB,KAAK,EAAE,8BAAmB,KAAK,EAAE,GAAG;EAC9D;;;AAHK,uBAAsD,OAClD,WAAgB;UADkC;UAClD;AADJ,wEAAK,EAAL,KAAK,EAAL,GAAG;;;;;EAGR;qGAGsB,OAAW,KAAc;;QAAzB;QAAW;AACe,IAAnC,gCAAgB,KAAK,EAAE,GAAG,EAAE;AACN,IAAjC,0BAAc,KAAK,EAAE,GAAG,EAAE,MAAM;EAClC;;;AAHK,oBAAiB,OAAW,KAAc;UAAzB;UAAW;AAA5B,2EAAK,EAAL,GAAG,EAAH,MAAM;;EAGX;qGAGsB,OAAW;;QAAX;QAAW;AACe,IAAnC,gCAAgB,KAAK,EAAE,GAAG,EAAE;AACvC,WAAa,aAAN,KAAK,KAAK,MAAF,aAAE,GAAG,IAAL;AACT,gBAAU,aAAC,KAAK;AACG,MAAnB,aAAC,KAAK,EAAQ,aAAC,GAAG;AACP,MAAX,aAAC,GAAG,EAAI,GAAG;AACL,MAAV,QAAM,aAAN,KAAK,IAAI;;EAEb;;;AARK,oBAAiB,OAAW;UAAX;UAAW;AAA5B,2EAAK,EAAL,GAAG;;EAQR;qFAGc,QAAY;;QAAZ;QAAY;AAC0B,IAAvC,gCAAgB,MAAM,SAAQ;AACS,IAAvC,gCAAgB,MAAM,SAAQ;AACrC,cAAU,aAAC,MAAM;AACM,IAAvB,aAAC,MAAM,EAAQ,aAAC,MAAM;AACR,IAAd,aAAC,MAAM,EAAI,GAAG;EACpB;;;AANK,oBAAS,QAAY;UAAZ;UAAY;AAArB,oEAAM,EAAN,MAAM;;EAMX;uFAcuB,OAAa;;QAAb;AAC+B,IAApD,MAAiB,gCAAgB,KAAK,EAAE,GAAG,EAAE;AACzC;AACJ,QAAS,6BAAL,IAAI,GAAe,MAAY,4CAAL,IAAI,EAAO,KAAK,EAAE,GAAG;AACnD,UAAO,gDAAmB,KAAK,EAAE,GAAG;EACtC;;;AALa,oBAAU,OAAa;UAAb;AAAV,oEAAK,EAAL,GAAG;;EAKhB;yFAQoB,OAAoB;;QAApB;QAAoB;AACtC,QAAI,kBAAU,AAAM,KAAD,WAAS,MAAO;AACnC,aAAS,IAAI,GAAG,AAAE,CAAD,gBAAG,iBAAQ,IAAA,AAAC,CAAA;AAC3B,qBAAK,AAAS,QAAD,QAAY,aAAC,CAAC,GAAG,AAAK,KAAA,QAAC,CAAC,KAAI,MAAO;;AAElD,UAAO;EACT;;;AANK,oBAAe,OAAoB;UAApB;UAAoB;AAAnC,qEAAK,EAAL,QAAQ;;EAMb;yHAamB,SAA8B;;;QAA9B;AACf,kDACU,+BAAkB,MAAR,OAAO,EAAP,cAAW,qCAAmB,OAAO;EAAC;;;AAF1D,oBAAe,SAA8B;UAA9B;AAAf,uFAAO,EAAP,OAAO;;EAEmD;qHAY7C,SAA8B;;;QAA9B;AACb,gDACU,+BAAkB,MAAR,OAAO,EAAP,cAAW,qCAAmB,OAAO;EAAC;;;AAF1D,oBAAa,SAA8B;UAA9B;AAAb,qFAAO,EAAP,OAAO;;EAEmD;mHAM3C,OAAW,KAA8B;;;QAAzC;QAAW;AACkB,IAAnC,gCAAgB,KAAK,EAAE,GAAG,EAAE;AAEsB,IAD7D,oCACU,+BAAkB,MAAR,OAAO,EAAP,cAAW,qCAAmB,KAAK,EAAE,GAAG;EAC9D;;;AAJK,oBAAc,OAAW,KAA8B;UAAzC;UAAW;AAAzB,kFAAK,EAAL,GAAG,EAAH,OAAO;;EAIZ","file":"../../../../../../../../../C:/packages/collection/src/list_extensions.dart.lib.js"}');
  // Exports:
  return {
    src__list_extensions: list_extensions
  };
}));

//# sourceMappingURL=list_extensions.dart.lib.js.map
