define(['dart_sdk'], (function load__packages__etv__model__cleaning_model_dart(dart_sdk) {
  'use strict';
  const core = dart_sdk.core;
  const _interceptors = dart_sdk._interceptors;
  const _js_helper = dart_sdk._js_helper;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  var cleaning_model = Object.create(dart.library);
  var $_get = dartx._get;
  var $add = dartx.add;
  var $_set = dartx._set;
  var $map = dartx.map;
  var $toList = dartx.toList;
  dart._checkModuleNullSafetyMode(false);
  var T = {
    intL: () => (T.intL = dart.constFn(dart.legacy(core.int)))(),
    StringL: () => (T.StringL = dart.constFn(dart.legacy(core.String)))(),
    ProductFrequenciesL: () => (T.ProductFrequenciesL = dart.constFn(dart.legacy(cleaning_model.ProductFrequencies)))(),
    JSArrayOfProductFrequenciesL: () => (T.JSArrayOfProductFrequenciesL = dart.constFn(_interceptors.JSArray$(T.ProductFrequenciesL())))(),
    MapOfStringL$dynamic: () => (T.MapOfStringL$dynamic = dart.constFn(core.Map$(T.StringL(), dart.dynamic)))(),
    MapLOfStringL$dynamic: () => (T.MapLOfStringL$dynamic = dart.constFn(dart.legacy(T.MapOfStringL$dynamic())))(),
    dynamicToNull: () => (T.dynamicToNull = dart.constFn(dart.fnType(core.Null, [dart.dynamic])))(),
    LinkedMapOfStringL$dynamic: () => (T.LinkedMapOfStringL$dynamic = dart.constFn(_js_helper.LinkedMap$(T.StringL(), dart.dynamic)))(),
    ProductFrequenciesLToMapLOfStringL$dynamic: () => (T.ProductFrequenciesLToMapLOfStringL$dynamic = dart.constFn(dart.fnType(T.MapLOfStringL$dynamic(), [T.ProductFrequenciesL()])))(),
    boolL: () => (T.boolL = dart.constFn(dart.legacy(core.bool)))(),
    OptionsL: () => (T.OptionsL = dart.constFn(dart.legacy(cleaning_model.Options)))(),
    JSArrayOfOptionsL: () => (T.JSArrayOfOptionsL = dart.constFn(_interceptors.JSArray$(T.OptionsL())))(),
    OptionsLToMapLOfStringL$dynamic: () => (T.OptionsLToMapLOfStringL$dynamic = dart.constFn(dart.fnType(T.MapLOfStringL$dynamic(), [T.OptionsL()])))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  var I = ["package:etv/model/cleaning_model.dart"];
  var id$ = dart.privateName(cleaning_model, "Cleaning.id");
  var type$ = dart.privateName(cleaning_model, "Cleaning.type");
  var name$ = dart.privateName(cleaning_model, "Cleaning.name");
  var slug$ = dart.privateName(cleaning_model, "Cleaning.slug");
  var icon$ = dart.privateName(cleaning_model, "Cleaning.icon");
  var productFrequencies$ = dart.privateName(cleaning_model, "Cleaning.productFrequencies");
  var size$ = dart.privateName(cleaning_model, "Cleaning.size");
  var extra$ = dart.privateName(cleaning_model, "Cleaning.extra");
  var $package$ = dart.privateName(cleaning_model, "Cleaning.package");
  var food$ = dart.privateName(cleaning_model, "Cleaning.food");
  var color$ = dart.privateName(cleaning_model, "Cleaning.color");
  cleaning_model.Cleaning = class Cleaning extends core.Object {
    get id() {
      return this[id$];
    }
    set id(value) {
      this[id$] = value;
    }
    get type() {
      return this[type$];
    }
    set type(value) {
      this[type$] = value;
    }
    get name() {
      return this[name$];
    }
    set name(value) {
      this[name$] = value;
    }
    get slug() {
      return this[slug$];
    }
    set slug(value) {
      this[slug$] = value;
    }
    get icon() {
      return this[icon$];
    }
    set icon(value) {
      this[icon$] = value;
    }
    get productFrequencies() {
      return this[productFrequencies$];
    }
    set productFrequencies(value) {
      this[productFrequencies$] = value;
    }
    get size() {
      return this[size$];
    }
    set size(value) {
      this[size$] = value;
    }
    get extra() {
      return this[extra$];
    }
    set extra(value) {
      this[extra$] = value;
    }
    get package() {
      return this[$package$];
    }
    set package(value) {
      this[$package$] = value;
    }
    get food() {
      return this[food$];
    }
    set food(value) {
      this[food$] = value;
    }
    get color() {
      return this[color$];
    }
    set color(value) {
      this[color$] = value;
    }
    toJson() {
      let data = new (T.LinkedMapOfStringL$dynamic()).new();
      data[$_set]("id", this.id);
      data[$_set]("type", this.type);
      data[$_set]("name", this.name);
      data[$_set]("slug", this.slug);
      data[$_set]("icon", this.icon);
      if (this.productFrequencies != null) {
        data[$_set]("productFrequencies", this.productFrequencies[$map](T.MapLOfStringL$dynamic(), dart.fn(v => v.toJson(), T.ProductFrequenciesLToMapLOfStringL$dynamic()))[$toList]());
      }
      if (this.size != null) {
        data[$_set]("size", this.size.toJson());
      }
      if (this.extra != null) {
        data[$_set]("extra", this.extra.toJson());
      }
      if (this.package != null) {
        data[$_set]("package", this.package.toJson());
      }
      if (this.food != null) {
        data[$_set]("food", this.food.toJson());
      }
      data[$_set]("color", this.color);
      return data;
    }
  };
  (cleaning_model.Cleaning.new = function(opts) {
    let id = opts && 'id' in opts ? opts.id : null;
    let type = opts && 'type' in opts ? opts.type : null;
    let name = opts && 'name' in opts ? opts.name : null;
    let slug = opts && 'slug' in opts ? opts.slug : null;
    let icon = opts && 'icon' in opts ? opts.icon : null;
    let productFrequencies = opts && 'productFrequencies' in opts ? opts.productFrequencies : null;
    let size = opts && 'size' in opts ? opts.size : null;
    let extra = opts && 'extra' in opts ? opts.extra : null;
    let $package = opts && 'package' in opts ? opts.package : null;
    let food = opts && 'food' in opts ? opts.food : null;
    let color = opts && 'color' in opts ? opts.color : null;
    this[id$] = id;
    this[type$] = type;
    this[name$] = name;
    this[slug$] = slug;
    this[icon$] = icon;
    this[productFrequencies$] = productFrequencies;
    this[size$] = size;
    this[extra$] = extra;
    this[$package$] = $package;
    this[food$] = food;
    this[color$] = color;
    ;
  }).prototype = cleaning_model.Cleaning.prototype;
  (cleaning_model.Cleaning.fromJson = function(json) {
    this[color$] = null;
    this[food$] = null;
    this[$package$] = null;
    this[extra$] = null;
    this[size$] = null;
    this[productFrequencies$] = null;
    this[icon$] = null;
    this[slug$] = null;
    this[name$] = null;
    this[type$] = null;
    this[id$] = null;
    this.id = T.intL().as(json[$_get]("id"));
    this.type = T.StringL().as(json[$_get]("type"));
    this.name = T.StringL().as(json[$_get]("name"));
    this.slug = T.StringL().as(json[$_get]("slug"));
    this.icon = T.StringL().as(json[$_get]("icon"));
    if (json[$_get]("productFrequencies") != null) {
      this.productFrequencies = T.JSArrayOfProductFrequenciesL().of([]);
      dart.dsend(json[$_get]("productFrequencies"), 'forEach', [dart.fn(v => {
          this.productFrequencies[$add](new cleaning_model.ProductFrequencies.fromJson(T.MapLOfStringL$dynamic().as(v)));
        }, T.dynamicToNull())]);
    }
    this.size = json[$_get]("size") != null ? new cleaning_model.Size.fromJson(T.MapLOfStringL$dynamic().as(json[$_get]("size"))) : null;
    this.extra = json[$_get]("extra") != null ? new cleaning_model.Size.fromJson(T.MapLOfStringL$dynamic().as(json[$_get]("extra"))) : null;
    this.package = json[$_get]("package") != null ? new cleaning_model.Size.fromJson(T.MapLOfStringL$dynamic().as(json[$_get]("package"))) : null;
    this.food = json[$_get]("food") != null ? new cleaning_model.Size.fromJson(T.MapLOfStringL$dynamic().as(json[$_get]("food"))) : null;
    this.color = T.StringL().as(json[$_get]("color"));
  }).prototype = cleaning_model.Cleaning.prototype;
  dart.addTypeTests(cleaning_model.Cleaning);
  dart.addTypeCaches(cleaning_model.Cleaning);
  dart.setMethodSignature(cleaning_model.Cleaning, () => ({
    __proto__: dart.getMethods(cleaning_model.Cleaning.__proto__),
    toJson: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), [])
  }));
  dart.setLibraryUri(cleaning_model.Cleaning, I[0]);
  dart.setFieldSignature(cleaning_model.Cleaning, () => ({
    __proto__: dart.getFields(cleaning_model.Cleaning.__proto__),
    id: dart.fieldType(dart.legacy(core.int)),
    type: dart.fieldType(dart.legacy(core.String)),
    name: dart.fieldType(dart.legacy(core.String)),
    slug: dart.fieldType(dart.legacy(core.String)),
    icon: dart.fieldType(dart.legacy(core.String)),
    productFrequencies: dart.fieldType(dart.legacy(core.List$(dart.legacy(cleaning_model.ProductFrequencies)))),
    size: dart.fieldType(dart.legacy(cleaning_model.Size)),
    extra: dart.fieldType(dart.legacy(cleaning_model.Size)),
    package: dart.fieldType(dart.legacy(cleaning_model.Size)),
    food: dart.fieldType(dart.legacy(cleaning_model.Size)),
    color: dart.fieldType(dart.legacy(core.String))
  }));
  var name$0 = dart.privateName(cleaning_model, "ProductFrequencies.name");
  var recurringDayValue$ = dart.privateName(cleaning_model, "ProductFrequencies.recurringDayValue");
  var isDefault$ = dart.privateName(cleaning_model, "ProductFrequencies.isDefault");
  var code$ = dart.privateName(cleaning_model, "ProductFrequencies.code");
  var visible$ = dart.privateName(cleaning_model, "ProductFrequencies.visible");
  cleaning_model.ProductFrequencies = class ProductFrequencies extends core.Object {
    get name() {
      return this[name$0];
    }
    set name(value) {
      this[name$0] = value;
    }
    get recurringDayValue() {
      return this[recurringDayValue$];
    }
    set recurringDayValue(value) {
      this[recurringDayValue$] = value;
    }
    get isDefault() {
      return this[isDefault$];
    }
    set isDefault(value) {
      this[isDefault$] = value;
    }
    get code() {
      return this[code$];
    }
    set code(value) {
      this[code$] = value;
    }
    get visible() {
      return this[visible$];
    }
    set visible(value) {
      this[visible$] = value;
    }
    toJson() {
      let data = new (T.LinkedMapOfStringL$dynamic()).new();
      data[$_set]("name", this.name);
      data[$_set]("recurringDayValue", this.recurringDayValue);
      data[$_set]("isDefault", this.isDefault);
      data[$_set]("code", this.code);
      data[$_set]("visible", this.visible);
      return data;
    }
  };
  (cleaning_model.ProductFrequencies.new = function(opts) {
    let name = opts && 'name' in opts ? opts.name : null;
    let recurringDayValue = opts && 'recurringDayValue' in opts ? opts.recurringDayValue : null;
    let isDefault = opts && 'isDefault' in opts ? opts.isDefault : null;
    let code = opts && 'code' in opts ? opts.code : null;
    let visible = opts && 'visible' in opts ? opts.visible : null;
    this[name$0] = name;
    this[recurringDayValue$] = recurringDayValue;
    this[isDefault$] = isDefault;
    this[code$] = code;
    this[visible$] = visible;
    ;
  }).prototype = cleaning_model.ProductFrequencies.prototype;
  (cleaning_model.ProductFrequencies.fromJson = function(json) {
    this[visible$] = null;
    this[code$] = null;
    this[isDefault$] = null;
    this[recurringDayValue$] = null;
    this[name$0] = null;
    this.name = T.StringL().as(json[$_get]("name"));
    this.recurringDayValue = T.intL().as(json[$_get]("recurringDayValue"));
    this.isDefault = T.boolL().as(json[$_get]("isDefault"));
    this.code = T.StringL().as(json[$_get]("code"));
    this.visible = T.boolL().as(json[$_get]("visible"));
  }).prototype = cleaning_model.ProductFrequencies.prototype;
  dart.addTypeTests(cleaning_model.ProductFrequencies);
  dart.addTypeCaches(cleaning_model.ProductFrequencies);
  dart.setMethodSignature(cleaning_model.ProductFrequencies, () => ({
    __proto__: dart.getMethods(cleaning_model.ProductFrequencies.__proto__),
    toJson: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), [])
  }));
  dart.setLibraryUri(cleaning_model.ProductFrequencies, I[0]);
  dart.setFieldSignature(cleaning_model.ProductFrequencies, () => ({
    __proto__: dart.getFields(cleaning_model.ProductFrequencies.__proto__),
    name: dart.fieldType(dart.legacy(core.String)),
    recurringDayValue: dart.fieldType(dart.legacy(core.int)),
    isDefault: dart.fieldType(dart.legacy(core.bool)),
    code: dart.fieldType(dart.legacy(core.String)),
    visible: dart.fieldType(dart.legacy(core.bool))
  }));
  var title$ = dart.privateName(cleaning_model, "Size.title");
  var icon$0 = dart.privateName(cleaning_model, "Size.icon");
  var chose$ = dart.privateName(cleaning_model, "Size.chose");
  var options$ = dart.privateName(cleaning_model, "Size.options");
  cleaning_model.Size = class Size extends core.Object {
    get title() {
      return this[title$];
    }
    set title(value) {
      this[title$] = value;
    }
    get icon() {
      return this[icon$0];
    }
    set icon(value) {
      this[icon$0] = value;
    }
    get chose() {
      return this[chose$];
    }
    set chose(value) {
      this[chose$] = value;
    }
    get options() {
      return this[options$];
    }
    set options(value) {
      this[options$] = value;
    }
    toJson() {
      let data = new (T.LinkedMapOfStringL$dynamic()).new();
      data[$_set]("title", this.title);
      data[$_set]("icon", this.icon);
      data[$_set]("chose", this.chose);
      if (this.options != null) {
        data[$_set]("options", this.options[$map](T.MapLOfStringL$dynamic(), dart.fn(v => v.toJson(), T.OptionsLToMapLOfStringL$dynamic()))[$toList]());
      }
      return data;
    }
  };
  (cleaning_model.Size.new = function(opts) {
    let title = opts && 'title' in opts ? opts.title : null;
    let icon = opts && 'icon' in opts ? opts.icon : null;
    let chose = opts && 'chose' in opts ? opts.chose : null;
    let options = opts && 'options' in opts ? opts.options : null;
    this[title$] = title;
    this[icon$0] = icon;
    this[chose$] = chose;
    this[options$] = options;
    ;
  }).prototype = cleaning_model.Size.prototype;
  (cleaning_model.Size.fromJson = function(json) {
    this[options$] = null;
    this[chose$] = null;
    this[icon$0] = null;
    this[title$] = null;
    this.title = T.StringL().as(json[$_get]("title"));
    this.icon = T.StringL().as(json[$_get]("icon"));
    this.chose = T.StringL().as(json[$_get]("chose"));
    if (json[$_get]("options") != null) {
      this.options = T.JSArrayOfOptionsL().of([]);
      dart.dsend(json[$_get]("options"), 'forEach', [dart.fn(v => {
          this.options[$add](new cleaning_model.Options.fromJson(T.MapLOfStringL$dynamic().as(v)));
        }, T.dynamicToNull())]);
    }
  }).prototype = cleaning_model.Size.prototype;
  dart.addTypeTests(cleaning_model.Size);
  dart.addTypeCaches(cleaning_model.Size);
  dart.setMethodSignature(cleaning_model.Size, () => ({
    __proto__: dart.getMethods(cleaning_model.Size.__proto__),
    toJson: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), [])
  }));
  dart.setLibraryUri(cleaning_model.Size, I[0]);
  dart.setFieldSignature(cleaning_model.Size, () => ({
    __proto__: dart.getFields(cleaning_model.Size.__proto__),
    title: dart.fieldType(dart.legacy(core.String)),
    icon: dart.fieldType(dart.legacy(core.String)),
    chose: dart.fieldType(dart.legacy(core.String)),
    options: dart.fieldType(dart.legacy(core.List$(dart.legacy(cleaning_model.Options))))
  }));
  var id$0 = dart.privateName(cleaning_model, "Options.id");
  var name$1 = dart.privateName(cleaning_model, "Options.name");
  var icon$1 = dart.privateName(cleaning_model, "Options.icon");
  var price$ = dart.privateName(cleaning_model, "Options.price");
  var paymentName$ = dart.privateName(cleaning_model, "Options.paymentName");
  var isDefault$0 = dart.privateName(cleaning_model, "Options.isDefault");
  cleaning_model.Options = class Options extends core.Object {
    get id() {
      return this[id$0];
    }
    set id(value) {
      this[id$0] = value;
    }
    get name() {
      return this[name$1];
    }
    set name(value) {
      this[name$1] = value;
    }
    get icon() {
      return this[icon$1];
    }
    set icon(value) {
      this[icon$1] = value;
    }
    get price() {
      return this[price$];
    }
    set price(value) {
      this[price$] = value;
    }
    get paymentName() {
      return this[paymentName$];
    }
    set paymentName(value) {
      this[paymentName$] = value;
    }
    get isDefault() {
      return this[isDefault$0];
    }
    set isDefault(value) {
      this[isDefault$0] = value;
    }
    toJson() {
      let data = new (T.LinkedMapOfStringL$dynamic()).new();
      data[$_set]("id", this.id);
      data[$_set]("name", this.name);
      data[$_set]("icon", this.icon);
      data[$_set]("price", this.price);
      data[$_set]("paymentName", this.paymentName);
      data[$_set]("isDefault", this.isDefault);
      return data;
    }
  };
  (cleaning_model.Options.new = function(opts) {
    let id = opts && 'id' in opts ? opts.id : null;
    let name = opts && 'name' in opts ? opts.name : null;
    let icon = opts && 'icon' in opts ? opts.icon : null;
    let price = opts && 'price' in opts ? opts.price : null;
    let paymentName = opts && 'paymentName' in opts ? opts.paymentName : null;
    let isDefault = opts && 'isDefault' in opts ? opts.isDefault : null;
    this[id$0] = id;
    this[name$1] = name;
    this[icon$1] = icon;
    this[price$] = price;
    this[paymentName$] = paymentName;
    this[isDefault$0] = isDefault;
    ;
  }).prototype = cleaning_model.Options.prototype;
  (cleaning_model.Options.fromJson = function(json) {
    this[isDefault$0] = null;
    this[paymentName$] = null;
    this[price$] = null;
    this[icon$1] = null;
    this[name$1] = null;
    this[id$0] = null;
    this.id = T.intL().as(json[$_get]("id"));
    this.name = T.StringL().as(json[$_get]("name"));
    this.icon = T.StringL().as(json[$_get]("icon"));
    this.price = T.intL().as(json[$_get]("price"));
    this.paymentName = T.StringL().as(json[$_get]("paymentName"));
    this.isDefault = T.boolL().as(json[$_get]("isDefault"));
  }).prototype = cleaning_model.Options.prototype;
  dart.addTypeTests(cleaning_model.Options);
  dart.addTypeCaches(cleaning_model.Options);
  dart.setMethodSignature(cleaning_model.Options, () => ({
    __proto__: dart.getMethods(cleaning_model.Options.__proto__),
    toJson: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), [])
  }));
  dart.setLibraryUri(cleaning_model.Options, I[0]);
  dart.setFieldSignature(cleaning_model.Options, () => ({
    __proto__: dart.getFields(cleaning_model.Options.__proto__),
    id: dart.fieldType(dart.legacy(core.int)),
    name: dart.fieldType(dart.legacy(core.String)),
    icon: dart.fieldType(dart.legacy(core.String)),
    price: dart.fieldType(dart.legacy(core.int)),
    paymentName: dart.fieldType(dart.legacy(core.String)),
    isDefault: dart.fieldType(dart.legacy(core.bool))
  }));
  dart.trackLibraries("packages/etv/model/cleaning_model.dart", {
    "package:etv/model/cleaning_model.dart": cleaning_model
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["cleaning_model.dart"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IACM;;;;;;IACG;;;;;;IACA;;;;;;IACA;;;;;;IACA;;;;;;IACkB;;;;;;IACpB;;;;;;IACA;;;;;;IACA;;;;;;IACA;;;;;;IACE;;;;;;;AAoCsB,iBAAW;AAClB,MAApB,AAAI,IAAA,QAAC,MAAa;AACM,MAAxB,AAAI,IAAA,QAAC,QAAe;AACI,MAAxB,AAAI,IAAA,QAAC,QAAe;AACI,MAAxB,AAAI,IAAA,QAAC,QAAe;AACI,MAAxB,AAAI,IAAA,QAAC,QAAe;AACpB,UAAS;AAEoD,QAD3D,AAAI,IAAA,QAAC,sBACI,AAAmB,AAAuB,yDAAnB,QAAC,KAAM,AAAE,CAAD;;AAE1C,UAAS;AAC0B,QAAjC,AAAI,IAAA,QAAC,QAAe,AAAK;;AAE3B,UAAS;AAC4B,QAAnC,AAAI,IAAA,QAAC,SAAgB,AAAM;;AAE7B,UAAS;AACgC,QAAvC,AAAI,IAAA,QAAC,WAAkB,AAAQ;;AAEjC,UAAS;AAC0B,QAAjC,AAAI,IAAA,QAAC,QAAe,AAAK;;AAED,MAA1B,AAAI,IAAA,QAAC,SAAgB;AACrB,YAAO,KAAI;IACb;;;QAzDU;QACD;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;IAVC;IACD;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;EAAO;+CAEuB;;;;;;;;;;;;AACtB,cAAf,YAAK,AAAI,IAAA,QAAC;AACS,gBAAnB,eAAO,AAAI,IAAA,QAAC;AACO,gBAAnB,eAAO,AAAI,IAAA,QAAC;AACO,gBAAnB,eAAO,AAAI,IAAA,QAAC;AACO,gBAAnB,eAAO,AAAI,IAAA,QAAC;AACZ,QAAI,AAAI,IAAA,QAAC;AAC4C,MAAnD,0BAAyB;AAGvB,MAFyB,WAA3B,AAAI,IAAA,QAAC,mCAA8B,QAAC;AACwB,UAA1D,AAAmB,8BAAQ,4EAA4B,CAAC;;;AAGQ,IAApE,YAAO,AAAI,AAAS,IAAT,QAAC,kBAAsB,8DAAc,AAAI,IAAA,QAAC,YAAW;AACO,IAAvE,aAAQ,AAAI,AAAU,IAAV,QAAC,mBAAuB,8DAAc,AAAI,IAAA,QAAC,aAAY;AAEI,IADvE,eACI,AAAI,AAAY,IAAZ,QAAC,qBAAyB,8DAAc,AAAI,IAAA,QAAC,eAAc;AACC,IAApE,YAAO,AAAI,AAAS,IAAT,QAAC,kBAAsB,8DAAc,AAAI,IAAA,QAAC,YAAW;AAC3C,iBAArB,eAAQ,AAAI,IAAA,QAAC;EACf;;;;;;;;;;;;;;;;;;;;;;;;;;;;IA+BO;;;;;;IACH;;;;;;IACC;;;;;;IACE;;;;;;IACF;;;;;;;AAkBwB,iBAAW;AACd,MAAxB,AAAI,IAAA,QAAC,QAAe;AAC8B,MAAlD,AAAI,IAAA,QAAC,qBAA4B;AACC,MAAlC,AAAI,IAAA,QAAC,aAAoB;AACD,MAAxB,AAAI,IAAA,QAAC,QAAe;AACU,MAA9B,AAAI,IAAA,QAAC,WAAkB;AACvB,YAAO,KAAI;IACb;;;QAtBU;QACD;QACA;QACA;QACA;IAJC;IACD;IACA;IACA;IACA;;EAAS;yDAE+B;;;;;;AAC5B,gBAAnB,eAAO,AAAI,IAAA,QAAC;AACiC,6BAA7C,YAAoB,AAAI,IAAA,QAAC;AACI,qBAA7B,aAAY,AAAI,IAAA,QAAC;AACE,gBAAnB,eAAO,AAAI,IAAA,QAAC;AACa,mBAAzB,aAAU,AAAI,IAAA,QAAC;EACjB;;;;;;;;;;;;;;;;;;;;;IAcO;;;;;;IACA;;;;;;IACA;;;;;;IACO;;;;;;;AAiBe,iBAAW;AACZ,MAA1B,AAAI,IAAA,QAAC,SAAgB;AACG,MAAxB,AAAI,IAAA,QAAC,QAAe;AACM,MAA1B,AAAI,IAAA,QAAC,SAAgB;AACrB,UAAS;AACuD,QAA9D,AAAI,IAAA,QAAC,WAAkB,AAAQ,AAAuB,8CAAnB,QAAC,KAAM,AAAE,CAAD;;AAE7C,YAAO,KAAI;IACb;;;QAvBW;QAAY;QAAW;QAAY;IAAnC;IAAY;IAAW;IAAY;;EAAS;2CAEpB;;;;;AACZ,iBAArB,eAAQ,AAAI,IAAA,QAAC;AACM,gBAAnB,eAAO,AAAI,IAAA,QAAC;AACS,iBAArB,eAAQ,AAAI,IAAA,QAAC;AACb,QAAI,AAAI,IAAA,QAAC;AACsB,MAA7B,eAAc;AAGZ,MAFc,WAAhB,AAAI,IAAA,QAAC,wBAAmB,QAAC;AACa,UAApC,AAAQ,mBAAQ,iEAAiB,CAAC;;;EAGxC;;;;;;;;;;;;;;;;;;;;;;IAeI;;;;;;IACG;;;;;;IACA;;;;;;IACH;;;;;;IACG;;;;;;IACF;;;;;;;AAoBwB,iBAAW;AAClB,MAApB,AAAI,IAAA,QAAC,MAAa;AACM,MAAxB,AAAI,IAAA,QAAC,QAAe;AACI,MAAxB,AAAI,IAAA,QAAC,QAAe;AACM,MAA1B,AAAI,IAAA,QAAC,SAAgB;AACiB,MAAtC,AAAI,IAAA,QAAC,eAAsB;AACO,MAAlC,AAAI,IAAA,QAAC,aAAoB;AACzB,YAAO,KAAI;IACb;;;QAzBU;QACD;QACA;QACA;QACA;QACA;IALC;IACD;IACA;IACA;IACA;IACA;;EAAW;8CAEkB;;;;;;;AACrB,cAAf,YAAK,AAAI,IAAA,QAAC;AACS,gBAAnB,eAAO,AAAI,IAAA,QAAC;AACO,gBAAnB,eAAO,AAAI,IAAA,QAAC;AACS,iBAArB,YAAQ,AAAI,IAAA,QAAC;AACoB,uBAAjC,eAAc,AAAI,IAAA,QAAC;AACU,qBAA7B,aAAY,AAAI,IAAA,QAAC;EACnB","file":"../../../../../../../../../packages/etv/model/cleaning_model.dart.lib.js"}');
  // Exports:
  return {
    model__cleaning_model: cleaning_model
  };
}));

//# sourceMappingURL=cleaning_model.dart.lib.js.map
